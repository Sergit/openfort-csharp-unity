/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Openfort.Client;
using Openfort.Model;

namespace Openfort.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates an account object.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player">The player ID</param>
        /// <param name="project">The project ID (optional)</param>
        /// <param name="chainId">The chain_id (optional)</param>
        /// <returns>AccountResponse</returns>
        AccountResponse CreateAccount(string player, string project = default(string), double? chainId = default(double?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates an account object.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player">The player ID</param>
        /// <param name="project">The project ID (optional)</param>
        /// <param name="chainId">The chain_id (optional)</param>
        /// <returns>ApiResponse of AccountResponse</returns>
        ApiResponse<AccountResponse> CreateAccountWithHttpInfo(string player, string project = default(string), double? chainId = default(double?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates an allow function object.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="functionName"></param>
        /// <param name="contract"></param>
        /// <param name="policy"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <returns>AllowFunctionResponse</returns>
        AllowFunctionResponse CreateAllowFunction(string type, string functionName, string contract, string policy = default(string), string project = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates an allow function object.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="functionName"></param>
        /// <param name="contract"></param>
        /// <param name="policy"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <returns>ApiResponse of AllowFunctionResponse</returns>
        ApiResponse<AllowFunctionResponse> CreateAllowFunctionWithHttpInfo(string type, string functionName, string contract, string policy = default(string), string project = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the details of an existing account. Supply the unique account ID from either a account creation request or the account list, and Openfort will return the corresponding account information.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="project">Specifies the unique project ID. (optional)</param>
        /// <returns>AccountResponse</returns>
        AccountResponse GetAccount(string id, string project = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the details of an existing account. Supply the unique account ID from either a account creation request or the account list, and Openfort will return the corresponding account information.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="project">Specifies the unique project ID. (optional)</param>
        /// <returns>ApiResponse of AccountResponse</returns>
        ApiResponse<AccountResponse> GetAccountWithHttpInfo(string id, string project = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the inventory of an existing account. Supply the unique account ID from either a account creation request or the account list, and Openfort will return the corresponding account information.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="project">Specifies the unique project ID. (optional)</param>
        /// <returns>InventoryResponse</returns>
        InventoryResponse GetAccountInventory(string id, string project = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the inventory of an existing account. Supply the unique account ID from either a account creation request or the account list, and Openfort will return the corresponding account information.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="project">Specifies the unique project ID. (optional)</param>
        /// <returns>ApiResponse of InventoryResponse</returns>
        ApiResponse<InventoryResponse> GetAccountInventoryWithHttpInfo(string id, string project = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of your accounts for the given player. The accounts are returned sorted by creation date, with the most recently created accounts appearing first.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player">Specifies the unique player ID.</param>
        /// <param name="project">Specifies the unique project ID. (optional)</param>
        /// <returns>AccountsResponse</returns>
        AccountsResponse GetAccounts(string player, string project = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of your accounts for the given player. The accounts are returned sorted by creation date, with the most recently created accounts appearing first.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player">Specifies the unique player ID.</param>
        /// <param name="project">Specifies the unique project ID. (optional)</param>
        /// <returns>ApiResponse of AccountsResponse</returns>
        ApiResponse<AccountsResponse> GetAccountsWithHttpInfo(string player, string project = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of your allow functions for the given policy. The allow functions are returned sorted by creation date, with the most recently created allow functions appearing first.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">Specifies the unique project ID. (optional)</param>
        /// <param name="policy">Specifies the unique policy ID. (optional)</param>
        /// <returns>AllowFunctionsResponse</returns>
        AllowFunctionsResponse GetAllowFunctions(string project = default(string), string policy = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of your allow functions for the given policy. The allow functions are returned sorted by creation date, with the most recently created allow functions appearing first.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">Specifies the unique project ID. (optional)</param>
        /// <param name="policy">Specifies the unique policy ID. (optional)</param>
        /// <returns>ApiResponse of AllowFunctionsResponse</returns>
        ApiResponse<AllowFunctionsResponse> GetAllowFunctionsWithHttpInfo(string project = default(string), string policy = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates your allow functions object.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique allow function ID.</param>
        /// <param name="type"></param>
        /// <param name="functionName"></param>
        /// <param name="contract"></param>
        /// <param name="policy"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <returns>AllowFunctionResponse</returns>
        AllowFunctionResponse UpdateAllowFunction(string id, string type, string functionName, string contract, string policy = default(string), string project = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates your allow functions object.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique allow function ID.</param>
        /// <param name="type"></param>
        /// <param name="functionName"></param>
        /// <param name="contract"></param>
        /// <param name="policy"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <returns>ApiResponse of AllowFunctionResponse</returns>
        ApiResponse<AllowFunctionResponse> UpdateAllowFunctionWithHttpInfo(string id, string type, string functionName, string contract, string policy = default(string), string project = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates an account object.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player">The player ID</param>
        /// <param name="project">The project ID (optional)</param>
        /// <param name="chainId">The chain_id (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountResponse</returns>
        System.Threading.Tasks.Task<AccountResponse> CreateAccountAsync(string player, string project = default(string), double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates an account object.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player">The player ID</param>
        /// <param name="project">The project ID (optional)</param>
        /// <param name="chainId">The chain_id (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountResponse>> CreateAccountWithHttpInfoAsync(string player, string project = default(string), double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates an allow function object.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="functionName"></param>
        /// <param name="contract"></param>
        /// <param name="policy"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AllowFunctionResponse</returns>
        System.Threading.Tasks.Task<AllowFunctionResponse> CreateAllowFunctionAsync(string type, string functionName, string contract, string policy = default(string), string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates an allow function object.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="functionName"></param>
        /// <param name="contract"></param>
        /// <param name="policy"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AllowFunctionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AllowFunctionResponse>> CreateAllowFunctionWithHttpInfoAsync(string type, string functionName, string contract, string policy = default(string), string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the details of an existing account. Supply the unique account ID from either a account creation request or the account list, and Openfort will return the corresponding account information.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="project">Specifies the unique project ID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountResponse</returns>
        System.Threading.Tasks.Task<AccountResponse> GetAccountAsync(string id, string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the details of an existing account. Supply the unique account ID from either a account creation request or the account list, and Openfort will return the corresponding account information.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="project">Specifies the unique project ID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountResponse>> GetAccountWithHttpInfoAsync(string id, string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the inventory of an existing account. Supply the unique account ID from either a account creation request or the account list, and Openfort will return the corresponding account information.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="project">Specifies the unique project ID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryResponse</returns>
        System.Threading.Tasks.Task<InventoryResponse> GetAccountInventoryAsync(string id, string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the inventory of an existing account. Supply the unique account ID from either a account creation request or the account list, and Openfort will return the corresponding account information.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="project">Specifies the unique project ID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InventoryResponse>> GetAccountInventoryWithHttpInfoAsync(string id, string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of your accounts for the given player. The accounts are returned sorted by creation date, with the most recently created accounts appearing first.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player">Specifies the unique player ID.</param>
        /// <param name="project">Specifies the unique project ID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountsResponse</returns>
        System.Threading.Tasks.Task<AccountsResponse> GetAccountsAsync(string player, string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of your accounts for the given player. The accounts are returned sorted by creation date, with the most recently created accounts appearing first.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player">Specifies the unique player ID.</param>
        /// <param name="project">Specifies the unique project ID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountsResponse>> GetAccountsWithHttpInfoAsync(string player, string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of your allow functions for the given policy. The allow functions are returned sorted by creation date, with the most recently created allow functions appearing first.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">Specifies the unique project ID. (optional)</param>
        /// <param name="policy">Specifies the unique policy ID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AllowFunctionsResponse</returns>
        System.Threading.Tasks.Task<AllowFunctionsResponse> GetAllowFunctionsAsync(string project = default(string), string policy = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of your allow functions for the given policy. The allow functions are returned sorted by creation date, with the most recently created allow functions appearing first.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">Specifies the unique project ID. (optional)</param>
        /// <param name="policy">Specifies the unique policy ID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AllowFunctionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AllowFunctionsResponse>> GetAllowFunctionsWithHttpInfoAsync(string project = default(string), string policy = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates your allow functions object.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique allow function ID.</param>
        /// <param name="type"></param>
        /// <param name="functionName"></param>
        /// <param name="contract"></param>
        /// <param name="policy"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AllowFunctionResponse</returns>
        System.Threading.Tasks.Task<AllowFunctionResponse> UpdateAllowFunctionAsync(string id, string type, string functionName, string contract, string policy = default(string), string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates your allow functions object.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique allow function ID.</param>
        /// <param name="type"></param>
        /// <param name="functionName"></param>
        /// <param name="contract"></param>
        /// <param name="policy"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AllowFunctionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AllowFunctionResponse>> UpdateAllowFunctionWithHttpInfoAsync(string id, string type, string functionName, string contract, string policy = default(string), string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDisposable, IDefaultApi
    {
        private Openfort.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public DefaultApi(string basePath)
        {
            this.Configuration = Openfort.Client.Configuration.MergeConfigurations(
                Openfort.Client.GlobalConfiguration.Instance,
                new Openfort.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Openfort.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Openfort.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public DefaultApi(Openfort.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Openfort.Client.Configuration.MergeConfigurations(
                Openfort.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Openfort.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Openfort.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public DefaultApi(Openfort.Client.ISynchronousClient client, Openfort.Client.IAsynchronousClient asyncClient, Openfort.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Openfort.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Openfort.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Openfort.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Openfort.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Openfort.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Openfort.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Creates an account object.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player">The player ID</param>
        /// <param name="project">The project ID (optional)</param>
        /// <param name="chainId">The chain_id (optional)</param>
        /// <returns>AccountResponse</returns>
        public AccountResponse CreateAccount(string player, string project = default(string), double? chainId = default(double?))
        {
            Openfort.Client.ApiResponse<AccountResponse> localVarResponse = CreateAccountWithHttpInfo(player, project, chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates an account object.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player">The player ID</param>
        /// <param name="project">The project ID (optional)</param>
        /// <param name="chainId">The chain_id (optional)</param>
        /// <returns>ApiResponse of AccountResponse</returns>
        public Openfort.Client.ApiResponse<AccountResponse> CreateAccountWithHttpInfo(string player, string project = default(string), double? chainId = default(double?))
        {
            // verify the required parameter 'player' is set
            if (player == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'player' when calling DefaultApi->CreateAccount");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (project != null)
            {
                localVarRequestOptions.FormParameters.Add("project", Openfort.Client.ClientUtils.ParameterToString(project)); // form parameter
            }
            if (chainId != null)
            {
                localVarRequestOptions.FormParameters.Add("chain_id", Openfort.Client.ClientUtils.ParameterToString(chainId)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("player", Openfort.Client.ClientUtils.ParameterToString(player)); // form parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<AccountResponse>("/v1/accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates an account object.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player">The player ID</param>
        /// <param name="project">The project ID (optional)</param>
        /// <param name="chainId">The chain_id (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountResponse</returns>
        public async System.Threading.Tasks.Task<AccountResponse> CreateAccountAsync(string player, string project = default(string), double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = CreateAccountWithHttpInfoAsync(player, project, chainId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<AccountResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<AccountResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates an account object.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player">The player ID</param>
        /// <param name="project">The project ID (optional)</param>
        /// <param name="chainId">The chain_id (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<AccountResponse>> CreateAccountWithHttpInfoAsync(string player, string project = default(string), double? chainId = default(double?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'player' is set
            if (player == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'player' when calling DefaultApi->CreateAccount");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (project != null)
            {
                localVarRequestOptions.FormParameters.Add("project", Openfort.Client.ClientUtils.ParameterToString(project)); // form parameter
            }
            if (chainId != null)
            {
                localVarRequestOptions.FormParameters.Add("chain_id", Openfort.Client.ClientUtils.ParameterToString(chainId)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("player", Openfort.Client.ClientUtils.ParameterToString(player)); // form parameter


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<AccountResponse>("/v1/accounts", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates an allow function object.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="functionName"></param>
        /// <param name="contract"></param>
        /// <param name="policy"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <returns>AllowFunctionResponse</returns>
        public AllowFunctionResponse CreateAllowFunction(string type, string functionName, string contract, string policy = default(string), string project = default(string))
        {
            Openfort.Client.ApiResponse<AllowFunctionResponse> localVarResponse = CreateAllowFunctionWithHttpInfo(type, functionName, contract, policy, project);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates an allow function object.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="functionName"></param>
        /// <param name="contract"></param>
        /// <param name="policy"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <returns>ApiResponse of AllowFunctionResponse</returns>
        public Openfort.Client.ApiResponse<AllowFunctionResponse> CreateAllowFunctionWithHttpInfo(string type, string functionName, string contract, string policy = default(string), string project = default(string))
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'type' when calling DefaultApi->CreateAllowFunction");

            // verify the required parameter 'functionName' is set
            if (functionName == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'functionName' when calling DefaultApi->CreateAllowFunction");

            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'contract' when calling DefaultApi->CreateAllowFunction");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.FormParameters.Add("type", Openfort.Client.ClientUtils.ParameterToString(type)); // form parameter
            localVarRequestOptions.FormParameters.Add("function_name", Openfort.Client.ClientUtils.ParameterToString(functionName)); // form parameter
            if (policy != null)
            {
                localVarRequestOptions.FormParameters.Add("policy", Openfort.Client.ClientUtils.ParameterToString(policy)); // form parameter
            }
            if (project != null)
            {
                localVarRequestOptions.FormParameters.Add("project", Openfort.Client.ClientUtils.ParameterToString(project)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("contract", Openfort.Client.ClientUtils.ParameterToString(contract)); // form parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<AllowFunctionResponse>("/v1/allow_functions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAllowFunction", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates an allow function object.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="functionName"></param>
        /// <param name="contract"></param>
        /// <param name="policy"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AllowFunctionResponse</returns>
        public async System.Threading.Tasks.Task<AllowFunctionResponse> CreateAllowFunctionAsync(string type, string functionName, string contract, string policy = default(string), string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = CreateAllowFunctionWithHttpInfoAsync(type, functionName, contract, policy, project, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<AllowFunctionResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<AllowFunctionResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates an allow function object.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="functionName"></param>
        /// <param name="contract"></param>
        /// <param name="policy"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AllowFunctionResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<AllowFunctionResponse>> CreateAllowFunctionWithHttpInfoAsync(string type, string functionName, string contract, string policy = default(string), string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'type' when calling DefaultApi->CreateAllowFunction");

            // verify the required parameter 'functionName' is set
            if (functionName == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'functionName' when calling DefaultApi->CreateAllowFunction");

            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'contract' when calling DefaultApi->CreateAllowFunction");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.FormParameters.Add("type", Openfort.Client.ClientUtils.ParameterToString(type)); // form parameter
            localVarRequestOptions.FormParameters.Add("function_name", Openfort.Client.ClientUtils.ParameterToString(functionName)); // form parameter
            if (policy != null)
            {
                localVarRequestOptions.FormParameters.Add("policy", Openfort.Client.ClientUtils.ParameterToString(policy)); // form parameter
            }
            if (project != null)
            {
                localVarRequestOptions.FormParameters.Add("project", Openfort.Client.ClientUtils.ParameterToString(project)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("contract", Openfort.Client.ClientUtils.ParameterToString(contract)); // form parameter


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<AllowFunctionResponse>("/v1/allow_functions", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAllowFunction", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves the details of an existing account. Supply the unique account ID from either a account creation request or the account list, and Openfort will return the corresponding account information.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="project">Specifies the unique project ID. (optional)</param>
        /// <returns>AccountResponse</returns>
        public AccountResponse GetAccount(string id, string project = default(string))
        {
            Openfort.Client.ApiResponse<AccountResponse> localVarResponse = GetAccountWithHttpInfo(id, project);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves the details of an existing account. Supply the unique account ID from either a account creation request or the account list, and Openfort will return the corresponding account information.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="project">Specifies the unique project ID. (optional)</param>
        /// <returns>ApiResponse of AccountResponse</returns>
        public Openfort.Client.ApiResponse<AccountResponse> GetAccountWithHttpInfo(string id, string project = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetAccount");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (project != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "project", project));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<AccountResponse>("/v1/accounts/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves the details of an existing account. Supply the unique account ID from either a account creation request or the account list, and Openfort will return the corresponding account information.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="project">Specifies the unique project ID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountResponse</returns>
        public async System.Threading.Tasks.Task<AccountResponse> GetAccountAsync(string id, string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetAccountWithHttpInfoAsync(id, project, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<AccountResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<AccountResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves the details of an existing account. Supply the unique account ID from either a account creation request or the account list, and Openfort will return the corresponding account information.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="project">Specifies the unique project ID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<AccountResponse>> GetAccountWithHttpInfoAsync(string id, string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetAccount");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (project != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "project", project));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<AccountResponse>("/v1/accounts/{id}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves the inventory of an existing account. Supply the unique account ID from either a account creation request or the account list, and Openfort will return the corresponding account information.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="project">Specifies the unique project ID. (optional)</param>
        /// <returns>InventoryResponse</returns>
        public InventoryResponse GetAccountInventory(string id, string project = default(string))
        {
            Openfort.Client.ApiResponse<InventoryResponse> localVarResponse = GetAccountInventoryWithHttpInfo(id, project);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves the inventory of an existing account. Supply the unique account ID from either a account creation request or the account list, and Openfort will return the corresponding account information.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="project">Specifies the unique project ID. (optional)</param>
        /// <returns>ApiResponse of InventoryResponse</returns>
        public Openfort.Client.ApiResponse<InventoryResponse> GetAccountInventoryWithHttpInfo(string id, string project = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetAccountInventory");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (project != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "project", project));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<InventoryResponse>("/v1/accounts/{id}/inventory", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountInventory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieves the inventory of an existing account. Supply the unique account ID from either a account creation request or the account list, and Openfort will return the corresponding account information.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="project">Specifies the unique project ID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryResponse</returns>
        public async System.Threading.Tasks.Task<InventoryResponse> GetAccountInventoryAsync(string id, string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetAccountInventoryWithHttpInfoAsync(id, project, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<InventoryResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<InventoryResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves the inventory of an existing account. Supply the unique account ID from either a account creation request or the account list, and Openfort will return the corresponding account information.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="project">Specifies the unique project ID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<InventoryResponse>> GetAccountInventoryWithHttpInfoAsync(string id, string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetAccountInventory");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (project != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "project", project));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<InventoryResponse>("/v1/accounts/{id}/inventory", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountInventory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of your accounts for the given player. The accounts are returned sorted by creation date, with the most recently created accounts appearing first.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player">Specifies the unique player ID.</param>
        /// <param name="project">Specifies the unique project ID. (optional)</param>
        /// <returns>AccountsResponse</returns>
        public AccountsResponse GetAccounts(string player, string project = default(string))
        {
            Openfort.Client.ApiResponse<AccountsResponse> localVarResponse = GetAccountsWithHttpInfo(player, project);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of your accounts for the given player. The accounts are returned sorted by creation date, with the most recently created accounts appearing first.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player">Specifies the unique player ID.</param>
        /// <param name="project">Specifies the unique project ID. (optional)</param>
        /// <returns>ApiResponse of AccountsResponse</returns>
        public Openfort.Client.ApiResponse<AccountsResponse> GetAccountsWithHttpInfo(string player, string project = default(string))
        {
            // verify the required parameter 'player' is set
            if (player == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'player' when calling DefaultApi->GetAccounts");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "player", player));
            if (project != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "project", project));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<AccountsResponse>("/v1/accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of your accounts for the given player. The accounts are returned sorted by creation date, with the most recently created accounts appearing first.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player">Specifies the unique player ID.</param>
        /// <param name="project">Specifies the unique project ID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountsResponse</returns>
        public async System.Threading.Tasks.Task<AccountsResponse> GetAccountsAsync(string player, string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetAccountsWithHttpInfoAsync(player, project, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<AccountsResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<AccountsResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of your accounts for the given player. The accounts are returned sorted by creation date, with the most recently created accounts appearing first.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player">Specifies the unique player ID.</param>
        /// <param name="project">Specifies the unique project ID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountsResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<AccountsResponse>> GetAccountsWithHttpInfoAsync(string player, string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'player' is set
            if (player == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'player' when calling DefaultApi->GetAccounts");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "player", player));
            if (project != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "project", project));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<AccountsResponse>("/v1/accounts", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of your allow functions for the given policy. The allow functions are returned sorted by creation date, with the most recently created allow functions appearing first.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">Specifies the unique project ID. (optional)</param>
        /// <param name="policy">Specifies the unique policy ID. (optional)</param>
        /// <returns>AllowFunctionsResponse</returns>
        public AllowFunctionsResponse GetAllowFunctions(string project = default(string), string policy = default(string))
        {
            Openfort.Client.ApiResponse<AllowFunctionsResponse> localVarResponse = GetAllowFunctionsWithHttpInfo(project, policy);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of your allow functions for the given policy. The allow functions are returned sorted by creation date, with the most recently created allow functions appearing first.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">Specifies the unique project ID. (optional)</param>
        /// <param name="policy">Specifies the unique policy ID. (optional)</param>
        /// <returns>ApiResponse of AllowFunctionsResponse</returns>
        public Openfort.Client.ApiResponse<AllowFunctionsResponse> GetAllowFunctionsWithHttpInfo(string project = default(string), string policy = default(string))
        {
            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (project != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "project", project));
            }
            if (policy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "policy", policy));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<AllowFunctionsResponse>("/v1/allow_functions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllowFunctions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of your allow functions for the given policy. The allow functions are returned sorted by creation date, with the most recently created allow functions appearing first.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">Specifies the unique project ID. (optional)</param>
        /// <param name="policy">Specifies the unique policy ID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AllowFunctionsResponse</returns>
        public async System.Threading.Tasks.Task<AllowFunctionsResponse> GetAllowFunctionsAsync(string project = default(string), string policy = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetAllowFunctionsWithHttpInfoAsync(project, policy, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<AllowFunctionsResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<AllowFunctionsResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of your allow functions for the given policy. The allow functions are returned sorted by creation date, with the most recently created allow functions appearing first.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project">Specifies the unique project ID. (optional)</param>
        /// <param name="policy">Specifies the unique policy ID. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AllowFunctionsResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<AllowFunctionsResponse>> GetAllowFunctionsWithHttpInfoAsync(string project = default(string), string policy = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (project != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "project", project));
            }
            if (policy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "policy", policy));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<AllowFunctionsResponse>("/v1/allow_functions", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllowFunctions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Updates your allow functions object.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique allow function ID.</param>
        /// <param name="type"></param>
        /// <param name="functionName"></param>
        /// <param name="contract"></param>
        /// <param name="policy"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <returns>AllowFunctionResponse</returns>
        public AllowFunctionResponse UpdateAllowFunction(string id, string type, string functionName, string contract, string policy = default(string), string project = default(string))
        {
            Openfort.Client.ApiResponse<AllowFunctionResponse> localVarResponse = UpdateAllowFunctionWithHttpInfo(id, type, functionName, contract, policy, project);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates your allow functions object.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique allow function ID.</param>
        /// <param name="type"></param>
        /// <param name="functionName"></param>
        /// <param name="contract"></param>
        /// <param name="policy"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <returns>ApiResponse of AllowFunctionResponse</returns>
        public Openfort.Client.ApiResponse<AllowFunctionResponse> UpdateAllowFunctionWithHttpInfo(string id, string type, string functionName, string contract, string policy = default(string), string project = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling DefaultApi->UpdateAllowFunction");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'type' when calling DefaultApi->UpdateAllowFunction");

            // verify the required parameter 'functionName' is set
            if (functionName == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'functionName' when calling DefaultApi->UpdateAllowFunction");

            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'contract' when calling DefaultApi->UpdateAllowFunction");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.FormParameters.Add("type", Openfort.Client.ClientUtils.ParameterToString(type)); // form parameter
            localVarRequestOptions.FormParameters.Add("function_name", Openfort.Client.ClientUtils.ParameterToString(functionName)); // form parameter
            if (policy != null)
            {
                localVarRequestOptions.FormParameters.Add("policy", Openfort.Client.ClientUtils.ParameterToString(policy)); // form parameter
            }
            if (project != null)
            {
                localVarRequestOptions.FormParameters.Add("project", Openfort.Client.ClientUtils.ParameterToString(project)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("contract", Openfort.Client.ClientUtils.ParameterToString(contract)); // form parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<AllowFunctionResponse>("/v1/allow_functions/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAllowFunction", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Updates your allow functions object.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique allow function ID.</param>
        /// <param name="type"></param>
        /// <param name="functionName"></param>
        /// <param name="contract"></param>
        /// <param name="policy"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AllowFunctionResponse</returns>
        public async System.Threading.Tasks.Task<AllowFunctionResponse> UpdateAllowFunctionAsync(string id, string type, string functionName, string contract, string policy = default(string), string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = UpdateAllowFunctionWithHttpInfoAsync(id, type, functionName, contract, policy, project, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<AllowFunctionResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<AllowFunctionResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates your allow functions object.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique allow function ID.</param>
        /// <param name="type"></param>
        /// <param name="functionName"></param>
        /// <param name="contract"></param>
        /// <param name="policy"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AllowFunctionResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<AllowFunctionResponse>> UpdateAllowFunctionWithHttpInfoAsync(string id, string type, string functionName, string contract, string policy = default(string), string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling DefaultApi->UpdateAllowFunction");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'type' when calling DefaultApi->UpdateAllowFunction");

            // verify the required parameter 'functionName' is set
            if (functionName == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'functionName' when calling DefaultApi->UpdateAllowFunction");

            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'contract' when calling DefaultApi->UpdateAllowFunction");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.FormParameters.Add("type", Openfort.Client.ClientUtils.ParameterToString(type)); // form parameter
            localVarRequestOptions.FormParameters.Add("function_name", Openfort.Client.ClientUtils.ParameterToString(functionName)); // form parameter
            if (policy != null)
            {
                localVarRequestOptions.FormParameters.Add("policy", Openfort.Client.ClientUtils.ParameterToString(policy)); // form parameter
            }
            if (project != null)
            {
                localVarRequestOptions.FormParameters.Add("project", Openfort.Client.ClientUtils.ParameterToString(project)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("contract", Openfort.Client.ClientUtils.ParameterToString(contract)); // form parameter


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<AllowFunctionResponse>("/v1/allow_functions/{id}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAllowFunction", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
