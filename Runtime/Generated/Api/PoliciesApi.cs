/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Openfort.Client;
using Openfort.Model;

namespace Openfort.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPoliciesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a policy object.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="chainId"></param>
        /// <param name="strategy"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <returns>PolicyResponse</returns>
        PolicyResponse CreatePolicy(string name, double chainId, string strategy = default(string), string project = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a policy object.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="chainId"></param>
        /// <param name="strategy"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        ApiResponse<PolicyResponse> CreatePolicyWithHttpInfo(string name, double chainId, string strategy = default(string), string project = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="type"></param>
        /// <param name="functionName"></param>
        /// <param name="contract"></param>
        /// <param name="policy2"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <returns>AllowFunctionResponse</returns>
        AllowFunctionResponse CreatePolicyAllowFunction(string policy, string type, string functionName, string contract, string policy2 = default(string), string project = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="type"></param>
        /// <param name="functionName"></param>
        /// <param name="contract"></param>
        /// <param name="policy2"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <returns>ApiResponse of AllowFunctionResponse</returns>
        ApiResponse<AllowFunctionResponse> CreatePolicyAllowFunctionWithHttpInfo(string policy, string type, string functionName, string contract, string policy2 = default(string), string project = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"> (optional)</param>
        /// <returns>PoliciesResponse</returns>
        PoliciesResponse GetPolicies(string project = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"> (optional)</param>
        /// <returns>ApiResponse of PoliciesResponse</returns>
        ApiResponse<PoliciesResponse> GetPoliciesWithHttpInfo(string project = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="project"> (optional)</param>
        /// <returns>PolicyResponse</returns>
        PolicyResponse GetPolicy(string id, string project = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="project"> (optional)</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        ApiResponse<PolicyResponse> GetPolicyWithHttpInfo(string id, string project = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="project"> (optional)</param>
        /// <returns>AllowFunctionsResponse</returns>
        AllowFunctionsResponse GetPolicyAllowFunctions(string policy, string project = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="project"> (optional)</param>
        /// <returns>ApiResponse of AllowFunctionsResponse</returns>
        ApiResponse<AllowFunctionsResponse> GetPolicyAllowFunctionsWithHttpInfo(string policy, string project = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <returns>Gas</returns>
        Gas GetPolicyDailyGasUsage(string policy, string from = default(string), string to = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <returns>ApiResponse of Gas</returns>
        ApiResponse<Gas> GetPolicyDailyGasUsageWithHttpInfo(string policy, string from = default(string), string to = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <returns>SumGas</returns>
        SumGas GetPolicyTotalGasUsage(string policy, string from = default(string), string to = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <returns>ApiResponse of SumGas</returns>
        ApiResponse<SumGas> GetPolicyTotalGasUsageWithHttpInfo(string policy, string from = default(string), string to = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a policy object.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="strategy"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <returns>PolicyResponse</returns>
        PolicyResponse UpdatePolicy(string id, string name = default(string), double? chainId = default(double?), string strategy = default(string), string project = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a policy object.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="strategy"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        ApiResponse<PolicyResponse> UpdatePolicyWithHttpInfo(string id, string name = default(string), double? chainId = default(double?), string strategy = default(string), string project = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="id"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="functionName"> (optional)</param>
        /// <param name="policy2"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <param name="contract"> (optional)</param>
        /// <returns>AllowFunctionResponse</returns>
        AllowFunctionResponse UpdatePolicyAllowFunction(string policy, string id, string type = default(string), string functionName = default(string), string policy2 = default(string), string project = default(string), string contract = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="id"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="functionName"> (optional)</param>
        /// <param name="policy2"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <param name="contract"> (optional)</param>
        /// <returns>ApiResponse of AllowFunctionResponse</returns>
        ApiResponse<AllowFunctionResponse> UpdatePolicyAllowFunctionWithHttpInfo(string policy, string id, string type = default(string), string functionName = default(string), string policy2 = default(string), string project = default(string), string contract = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPoliciesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a policy object.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="chainId"></param>
        /// <param name="strategy"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PolicyResponse</returns>
        System.Threading.Tasks.Task<PolicyResponse> CreatePolicyAsync(string name, double chainId, string strategy = default(string), string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a policy object.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="chainId"></param>
        /// <param name="strategy"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyResponse>> CreatePolicyWithHttpInfoAsync(string name, double chainId, string strategy = default(string), string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="type"></param>
        /// <param name="functionName"></param>
        /// <param name="contract"></param>
        /// <param name="policy2"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AllowFunctionResponse</returns>
        System.Threading.Tasks.Task<AllowFunctionResponse> CreatePolicyAllowFunctionAsync(string policy, string type, string functionName, string contract, string policy2 = default(string), string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="type"></param>
        /// <param name="functionName"></param>
        /// <param name="contract"></param>
        /// <param name="policy2"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AllowFunctionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AllowFunctionResponse>> CreatePolicyAllowFunctionWithHttpInfoAsync(string policy, string type, string functionName, string contract, string policy2 = default(string), string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PoliciesResponse</returns>
        System.Threading.Tasks.Task<PoliciesResponse> GetPoliciesAsync(string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PoliciesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PoliciesResponse>> GetPoliciesWithHttpInfoAsync(string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="project"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PolicyResponse</returns>
        System.Threading.Tasks.Task<PolicyResponse> GetPolicyAsync(string id, string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="project"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyResponse>> GetPolicyWithHttpInfoAsync(string id, string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="project"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AllowFunctionsResponse</returns>
        System.Threading.Tasks.Task<AllowFunctionsResponse> GetPolicyAllowFunctionsAsync(string policy, string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="project"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AllowFunctionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AllowFunctionsResponse>> GetPolicyAllowFunctionsWithHttpInfoAsync(string policy, string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Gas</returns>
        System.Threading.Tasks.Task<Gas> GetPolicyDailyGasUsageAsync(string policy, string from = default(string), string to = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Gas)</returns>
        System.Threading.Tasks.Task<ApiResponse<Gas>> GetPolicyDailyGasUsageWithHttpInfoAsync(string policy, string from = default(string), string to = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SumGas</returns>
        System.Threading.Tasks.Task<SumGas> GetPolicyTotalGasUsageAsync(string policy, string from = default(string), string to = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SumGas)</returns>
        System.Threading.Tasks.Task<ApiResponse<SumGas>> GetPolicyTotalGasUsageWithHttpInfoAsync(string policy, string from = default(string), string to = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a policy object.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="strategy"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PolicyResponse</returns>
        System.Threading.Tasks.Task<PolicyResponse> UpdatePolicyAsync(string id, string name = default(string), double? chainId = default(double?), string strategy = default(string), string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates a policy object.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="strategy"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyResponse>> UpdatePolicyWithHttpInfoAsync(string id, string name = default(string), double? chainId = default(double?), string strategy = default(string), string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="id"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="functionName"> (optional)</param>
        /// <param name="policy2"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <param name="contract"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AllowFunctionResponse</returns>
        System.Threading.Tasks.Task<AllowFunctionResponse> UpdatePolicyAllowFunctionAsync(string policy, string id, string type = default(string), string functionName = default(string), string policy2 = default(string), string project = default(string), string contract = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="id"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="functionName"> (optional)</param>
        /// <param name="policy2"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <param name="contract"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AllowFunctionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AllowFunctionResponse>> UpdatePolicyAllowFunctionWithHttpInfoAsync(string policy, string id, string type = default(string), string functionName = default(string), string policy2 = default(string), string project = default(string), string contract = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPoliciesApi : IPoliciesApiSync, IPoliciesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PoliciesApi : IDisposable, IPoliciesApi
    {
        private Openfort.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PoliciesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public PoliciesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PoliciesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public PoliciesApi(string basePath)
        {
            this.Configuration = Openfort.Client.Configuration.MergeConfigurations(
                Openfort.Client.GlobalConfiguration.Instance,
                new Openfort.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Openfort.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Openfort.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PoliciesApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public PoliciesApi(Openfort.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Openfort.Client.Configuration.MergeConfigurations(
                Openfort.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Openfort.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Openfort.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PoliciesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public PoliciesApi(Openfort.Client.ISynchronousClient client, Openfort.Client.IAsynchronousClient asyncClient, Openfort.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Openfort.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Openfort.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Openfort.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Openfort.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Openfort.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Openfort.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Create a policy object.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="chainId"></param>
        /// <param name="strategy"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <returns>PolicyResponse</returns>
        public PolicyResponse CreatePolicy(string name, double chainId, string strategy = default(string), string project = default(string))
        {
            Openfort.Client.ApiResponse<PolicyResponse> localVarResponse = CreatePolicyWithHttpInfo(name, chainId, strategy, project);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a policy object.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="chainId"></param>
        /// <param name="strategy"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        public Openfort.Client.ApiResponse<PolicyResponse> CreatePolicyWithHttpInfo(string name, double chainId, string strategy = default(string), string project = default(string))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'name' when calling PoliciesApi->CreatePolicy");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.FormParameters.Add("name", Openfort.Client.ClientUtils.ParameterToString(name)); // form parameter
            localVarRequestOptions.FormParameters.Add("chain_id", Openfort.Client.ClientUtils.ParameterToString(chainId)); // form parameter
            if (strategy != null)
            {
                localVarRequestOptions.FormParameters.Add("strategy", Openfort.Client.ClientUtils.ParameterToString(strategy)); // form parameter
            }
            if (project != null)
            {
                localVarRequestOptions.FormParameters.Add("project", Openfort.Client.ClientUtils.ParameterToString(project)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post<PolicyResponse>("/v1/policies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create a policy object.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="chainId"></param>
        /// <param name="strategy"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PolicyResponse</returns>
        public async System.Threading.Tasks.Task<PolicyResponse> CreatePolicyAsync(string name, double chainId, string strategy = default(string), string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = CreatePolicyWithHttpInfoAsync(name, chainId, strategy, project, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<PolicyResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<PolicyResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a policy object.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="chainId"></param>
        /// <param name="strategy"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<PolicyResponse>> CreatePolicyWithHttpInfoAsync(string name, double chainId, string strategy = default(string), string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'name' when calling PoliciesApi->CreatePolicy");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.FormParameters.Add("name", Openfort.Client.ClientUtils.ParameterToString(name)); // form parameter
            localVarRequestOptions.FormParameters.Add("chain_id", Openfort.Client.ClientUtils.ParameterToString(chainId)); // form parameter
            if (strategy != null)
            {
                localVarRequestOptions.FormParameters.Add("strategy", Openfort.Client.ClientUtils.ParameterToString(strategy)); // form parameter
            }
            if (project != null)
            {
                localVarRequestOptions.FormParameters.Add("project", Openfort.Client.ClientUtils.ParameterToString(project)); // form parameter
            }


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<PolicyResponse>("/v1/policies", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="type"></param>
        /// <param name="functionName"></param>
        /// <param name="contract"></param>
        /// <param name="policy2"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <returns>AllowFunctionResponse</returns>
        public AllowFunctionResponse CreatePolicyAllowFunction(string policy, string type, string functionName, string contract, string policy2 = default(string), string project = default(string))
        {
            Openfort.Client.ApiResponse<AllowFunctionResponse> localVarResponse = CreatePolicyAllowFunctionWithHttpInfo(policy, type, functionName, contract, policy2, project);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="type"></param>
        /// <param name="functionName"></param>
        /// <param name="contract"></param>
        /// <param name="policy2"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <returns>ApiResponse of AllowFunctionResponse</returns>
        public Openfort.Client.ApiResponse<AllowFunctionResponse> CreatePolicyAllowFunctionWithHttpInfo(string policy, string type, string functionName, string contract, string policy2 = default(string), string project = default(string))
        {
            // verify the required parameter 'policy' is set
            if (policy == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'policy' when calling PoliciesApi->CreatePolicyAllowFunction");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'type' when calling PoliciesApi->CreatePolicyAllowFunction");

            // verify the required parameter 'functionName' is set
            if (functionName == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'functionName' when calling PoliciesApi->CreatePolicyAllowFunction");

            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'contract' when calling PoliciesApi->CreatePolicyAllowFunction");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("policy", Openfort.Client.ClientUtils.ParameterToString(policy)); // path parameter
            localVarRequestOptions.FormParameters.Add("type", Openfort.Client.ClientUtils.ParameterToString(type)); // form parameter
            localVarRequestOptions.FormParameters.Add("function_name", Openfort.Client.ClientUtils.ParameterToString(functionName)); // form parameter
            if (policy2 != null)
            {
                localVarRequestOptions.FormParameters.Add("policy", Openfort.Client.ClientUtils.ParameterToString(policy2)); // form parameter
            }
            if (project != null)
            {
                localVarRequestOptions.FormParameters.Add("project", Openfort.Client.ClientUtils.ParameterToString(project)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("contract", Openfort.Client.ClientUtils.ParameterToString(contract)); // form parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<AllowFunctionResponse>("/v1/policies/{policy}/allow_functions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePolicyAllowFunction", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="type"></param>
        /// <param name="functionName"></param>
        /// <param name="contract"></param>
        /// <param name="policy2"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AllowFunctionResponse</returns>
        public async System.Threading.Tasks.Task<AllowFunctionResponse> CreatePolicyAllowFunctionAsync(string policy, string type, string functionName, string contract, string policy2 = default(string), string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = CreatePolicyAllowFunctionWithHttpInfoAsync(policy, type, functionName, contract, policy2, project, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<AllowFunctionResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<AllowFunctionResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="type"></param>
        /// <param name="functionName"></param>
        /// <param name="contract"></param>
        /// <param name="policy2"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AllowFunctionResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<AllowFunctionResponse>> CreatePolicyAllowFunctionWithHttpInfoAsync(string policy, string type, string functionName, string contract, string policy2 = default(string), string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'policy' is set
            if (policy == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'policy' when calling PoliciesApi->CreatePolicyAllowFunction");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'type' when calling PoliciesApi->CreatePolicyAllowFunction");

            // verify the required parameter 'functionName' is set
            if (functionName == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'functionName' when calling PoliciesApi->CreatePolicyAllowFunction");

            // verify the required parameter 'contract' is set
            if (contract == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'contract' when calling PoliciesApi->CreatePolicyAllowFunction");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("policy", Openfort.Client.ClientUtils.ParameterToString(policy)); // path parameter
            localVarRequestOptions.FormParameters.Add("type", Openfort.Client.ClientUtils.ParameterToString(type)); // form parameter
            localVarRequestOptions.FormParameters.Add("function_name", Openfort.Client.ClientUtils.ParameterToString(functionName)); // form parameter
            if (policy2 != null)
            {
                localVarRequestOptions.FormParameters.Add("policy", Openfort.Client.ClientUtils.ParameterToString(policy2)); // form parameter
            }
            if (project != null)
            {
                localVarRequestOptions.FormParameters.Add("project", Openfort.Client.ClientUtils.ParameterToString(project)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("contract", Openfort.Client.ClientUtils.ParameterToString(contract)); // form parameter


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<AllowFunctionResponse>("/v1/policies/{policy}/allow_functions", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePolicyAllowFunction", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"> (optional)</param>
        /// <returns>PoliciesResponse</returns>
        public PoliciesResponse GetPolicies(string project = default(string))
        {
            Openfort.Client.ApiResponse<PoliciesResponse> localVarResponse = GetPoliciesWithHttpInfo(project);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"> (optional)</param>
        /// <returns>ApiResponse of PoliciesResponse</returns>
        public Openfort.Client.ApiResponse<PoliciesResponse> GetPoliciesWithHttpInfo(string project = default(string))
        {
            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (project != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "project", project));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<PoliciesResponse>("/v1/policies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPolicies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PoliciesResponse</returns>
        public async System.Threading.Tasks.Task<PoliciesResponse> GetPoliciesAsync(string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetPoliciesWithHttpInfoAsync(project, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<PoliciesResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<PoliciesResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="project"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PoliciesResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<PoliciesResponse>> GetPoliciesWithHttpInfoAsync(string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (project != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "project", project));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<PoliciesResponse>("/v1/policies", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPolicies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="project"> (optional)</param>
        /// <returns>PolicyResponse</returns>
        public PolicyResponse GetPolicy(string id, string project = default(string))
        {
            Openfort.Client.ApiResponse<PolicyResponse> localVarResponse = GetPolicyWithHttpInfo(id, project);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="project"> (optional)</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        public Openfort.Client.ApiResponse<PolicyResponse> GetPolicyWithHttpInfo(string id, string project = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling PoliciesApi->GetPolicy");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (project != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "project", project));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<PolicyResponse>("/v1/policies/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="project"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PolicyResponse</returns>
        public async System.Threading.Tasks.Task<PolicyResponse> GetPolicyAsync(string id, string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetPolicyWithHttpInfoAsync(id, project, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<PolicyResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<PolicyResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="project"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<PolicyResponse>> GetPolicyWithHttpInfoAsync(string id, string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling PoliciesApi->GetPolicy");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (project != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "project", project));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<PolicyResponse>("/v1/policies/{id}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="project"> (optional)</param>
        /// <returns>AllowFunctionsResponse</returns>
        public AllowFunctionsResponse GetPolicyAllowFunctions(string policy, string project = default(string))
        {
            Openfort.Client.ApiResponse<AllowFunctionsResponse> localVarResponse = GetPolicyAllowFunctionsWithHttpInfo(policy, project);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="project"> (optional)</param>
        /// <returns>ApiResponse of AllowFunctionsResponse</returns>
        public Openfort.Client.ApiResponse<AllowFunctionsResponse> GetPolicyAllowFunctionsWithHttpInfo(string policy, string project = default(string))
        {
            // verify the required parameter 'policy' is set
            if (policy == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'policy' when calling PoliciesApi->GetPolicyAllowFunctions");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("policy", Openfort.Client.ClientUtils.ParameterToString(policy)); // path parameter
            if (project != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "project", project));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<AllowFunctionsResponse>("/v1/policies/{policy}/allow_functions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPolicyAllowFunctions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="project"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AllowFunctionsResponse</returns>
        public async System.Threading.Tasks.Task<AllowFunctionsResponse> GetPolicyAllowFunctionsAsync(string policy, string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetPolicyAllowFunctionsWithHttpInfoAsync(policy, project, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<AllowFunctionsResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<AllowFunctionsResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="project"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AllowFunctionsResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<AllowFunctionsResponse>> GetPolicyAllowFunctionsWithHttpInfoAsync(string policy, string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'policy' is set
            if (policy == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'policy' when calling PoliciesApi->GetPolicyAllowFunctions");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("policy", Openfort.Client.ClientUtils.ParameterToString(policy)); // path parameter
            if (project != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "project", project));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<AllowFunctionsResponse>("/v1/policies/{policy}/allow_functions", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPolicyAllowFunctions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <returns>Gas</returns>
        public Gas GetPolicyDailyGasUsage(string policy, string from = default(string), string to = default(string))
        {
            Openfort.Client.ApiResponse<Gas> localVarResponse = GetPolicyDailyGasUsageWithHttpInfo(policy, from, to);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <returns>ApiResponse of Gas</returns>
        public Openfort.Client.ApiResponse<Gas> GetPolicyDailyGasUsageWithHttpInfo(string policy, string from = default(string), string to = default(string))
        {
            // verify the required parameter 'policy' is set
            if (policy == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'policy' when calling PoliciesApi->GetPolicyDailyGasUsage");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("policy", Openfort.Client.ClientUtils.ParameterToString(policy)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Gas>("/v1/policies/{policy}/daily_gas_usage", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPolicyDailyGasUsage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Gas</returns>
        public async System.Threading.Tasks.Task<Gas> GetPolicyDailyGasUsageAsync(string policy, string from = default(string), string to = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetPolicyDailyGasUsageWithHttpInfoAsync(policy, from, to, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<Gas> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<Gas> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Gas)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<Gas>> GetPolicyDailyGasUsageWithHttpInfoAsync(string policy, string from = default(string), string to = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'policy' is set
            if (policy == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'policy' when calling PoliciesApi->GetPolicyDailyGasUsage");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("policy", Openfort.Client.ClientUtils.ParameterToString(policy)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<Gas>("/v1/policies/{policy}/daily_gas_usage", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPolicyDailyGasUsage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <returns>SumGas</returns>
        public SumGas GetPolicyTotalGasUsage(string policy, string from = default(string), string to = default(string))
        {
            Openfort.Client.ApiResponse<SumGas> localVarResponse = GetPolicyTotalGasUsageWithHttpInfo(policy, from, to);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <returns>ApiResponse of SumGas</returns>
        public Openfort.Client.ApiResponse<SumGas> GetPolicyTotalGasUsageWithHttpInfo(string policy, string from = default(string), string to = default(string))
        {
            // verify the required parameter 'policy' is set
            if (policy == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'policy' when calling PoliciesApi->GetPolicyTotalGasUsage");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("policy", Openfort.Client.ClientUtils.ParameterToString(policy)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<SumGas>("/v1/policies/{policy}/gas_usage", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPolicyTotalGasUsage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SumGas</returns>
        public async System.Threading.Tasks.Task<SumGas> GetPolicyTotalGasUsageAsync(string policy, string from = default(string), string to = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetPolicyTotalGasUsageWithHttpInfoAsync(policy, from, to, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<SumGas> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<SumGas> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="from"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SumGas)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<SumGas>> GetPolicyTotalGasUsageWithHttpInfoAsync(string policy, string from = default(string), string to = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'policy' is set
            if (policy == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'policy' when calling PoliciesApi->GetPolicyTotalGasUsage");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("policy", Openfort.Client.ClientUtils.ParameterToString(policy)); // path parameter
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<SumGas>("/v1/policies/{policy}/gas_usage", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPolicyTotalGasUsage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Updates a policy object.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="strategy"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <returns>PolicyResponse</returns>
        public PolicyResponse UpdatePolicy(string id, string name = default(string), double? chainId = default(double?), string strategy = default(string), string project = default(string))
        {
            Openfort.Client.ApiResponse<PolicyResponse> localVarResponse = UpdatePolicyWithHttpInfo(id, name, chainId, strategy, project);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates a policy object.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="strategy"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        public Openfort.Client.ApiResponse<PolicyResponse> UpdatePolicyWithHttpInfo(string id, string name = default(string), double? chainId = default(double?), string strategy = default(string), string project = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling PoliciesApi->UpdatePolicy");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (name != null)
            {
                localVarRequestOptions.FormParameters.Add("name", Openfort.Client.ClientUtils.ParameterToString(name)); // form parameter
            }
            if (chainId != null)
            {
                localVarRequestOptions.FormParameters.Add("chain_id", Openfort.Client.ClientUtils.ParameterToString(chainId)); // form parameter
            }
            if (strategy != null)
            {
                localVarRequestOptions.FormParameters.Add("strategy", Openfort.Client.ClientUtils.ParameterToString(strategy)); // form parameter
            }
            if (project != null)
            {
                localVarRequestOptions.FormParameters.Add("project", Openfort.Client.ClientUtils.ParameterToString(project)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post<PolicyResponse>("/v1/policies/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Updates a policy object.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="strategy"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PolicyResponse</returns>
        public async System.Threading.Tasks.Task<PolicyResponse> UpdatePolicyAsync(string id, string name = default(string), double? chainId = default(double?), string strategy = default(string), string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = UpdatePolicyWithHttpInfoAsync(id, name, chainId, strategy, project, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<PolicyResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<PolicyResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates a policy object.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="strategy"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<PolicyResponse>> UpdatePolicyWithHttpInfoAsync(string id, string name = default(string), double? chainId = default(double?), string strategy = default(string), string project = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling PoliciesApi->UpdatePolicy");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (name != null)
            {
                localVarRequestOptions.FormParameters.Add("name", Openfort.Client.ClientUtils.ParameterToString(name)); // form parameter
            }
            if (chainId != null)
            {
                localVarRequestOptions.FormParameters.Add("chain_id", Openfort.Client.ClientUtils.ParameterToString(chainId)); // form parameter
            }
            if (strategy != null)
            {
                localVarRequestOptions.FormParameters.Add("strategy", Openfort.Client.ClientUtils.ParameterToString(strategy)); // form parameter
            }
            if (project != null)
            {
                localVarRequestOptions.FormParameters.Add("project", Openfort.Client.ClientUtils.ParameterToString(project)); // form parameter
            }


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<PolicyResponse>("/v1/policies/{id}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="id"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="functionName"> (optional)</param>
        /// <param name="policy2"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <param name="contract"> (optional)</param>
        /// <returns>AllowFunctionResponse</returns>
        public AllowFunctionResponse UpdatePolicyAllowFunction(string policy, string id, string type = default(string), string functionName = default(string), string policy2 = default(string), string project = default(string), string contract = default(string))
        {
            Openfort.Client.ApiResponse<AllowFunctionResponse> localVarResponse = UpdatePolicyAllowFunctionWithHttpInfo(policy, id, type, functionName, policy2, project, contract);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="id"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="functionName"> (optional)</param>
        /// <param name="policy2"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <param name="contract"> (optional)</param>
        /// <returns>ApiResponse of AllowFunctionResponse</returns>
        public Openfort.Client.ApiResponse<AllowFunctionResponse> UpdatePolicyAllowFunctionWithHttpInfo(string policy, string id, string type = default(string), string functionName = default(string), string policy2 = default(string), string project = default(string), string contract = default(string))
        {
            // verify the required parameter 'policy' is set
            if (policy == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'policy' when calling PoliciesApi->UpdatePolicyAllowFunction");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling PoliciesApi->UpdatePolicyAllowFunction");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("policy", Openfort.Client.ClientUtils.ParameterToString(policy)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (type != null)
            {
                localVarRequestOptions.FormParameters.Add("type", Openfort.Client.ClientUtils.ParameterToString(type)); // form parameter
            }
            if (functionName != null)
            {
                localVarRequestOptions.FormParameters.Add("function_name", Openfort.Client.ClientUtils.ParameterToString(functionName)); // form parameter
            }
            if (policy2 != null)
            {
                localVarRequestOptions.FormParameters.Add("policy", Openfort.Client.ClientUtils.ParameterToString(policy2)); // form parameter
            }
            if (project != null)
            {
                localVarRequestOptions.FormParameters.Add("project", Openfort.Client.ClientUtils.ParameterToString(project)); // form parameter
            }
            if (contract != null)
            {
                localVarRequestOptions.FormParameters.Add("contract", Openfort.Client.ClientUtils.ParameterToString(contract)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post<AllowFunctionResponse>("/v1/policies/{policy}/allow_functions/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePolicyAllowFunction", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="id"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="functionName"> (optional)</param>
        /// <param name="policy2"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <param name="contract"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AllowFunctionResponse</returns>
        public async System.Threading.Tasks.Task<AllowFunctionResponse> UpdatePolicyAllowFunctionAsync(string policy, string id, string type = default(string), string functionName = default(string), string policy2 = default(string), string project = default(string), string contract = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = UpdatePolicyAllowFunctionWithHttpInfoAsync(policy, id, type, functionName, policy2, project, contract, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<AllowFunctionResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<AllowFunctionResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policy"></param>
        /// <param name="id"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="functionName"> (optional)</param>
        /// <param name="policy2"> (optional)</param>
        /// <param name="project"> (optional)</param>
        /// <param name="contract"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AllowFunctionResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<AllowFunctionResponse>> UpdatePolicyAllowFunctionWithHttpInfoAsync(string policy, string id, string type = default(string), string functionName = default(string), string policy2 = default(string), string project = default(string), string contract = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'policy' is set
            if (policy == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'policy' when calling PoliciesApi->UpdatePolicyAllowFunction");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling PoliciesApi->UpdatePolicyAllowFunction");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("policy", Openfort.Client.ClientUtils.ParameterToString(policy)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (type != null)
            {
                localVarRequestOptions.FormParameters.Add("type", Openfort.Client.ClientUtils.ParameterToString(type)); // form parameter
            }
            if (functionName != null)
            {
                localVarRequestOptions.FormParameters.Add("function_name", Openfort.Client.ClientUtils.ParameterToString(functionName)); // form parameter
            }
            if (policy2 != null)
            {
                localVarRequestOptions.FormParameters.Add("policy", Openfort.Client.ClientUtils.ParameterToString(policy2)); // form parameter
            }
            if (project != null)
            {
                localVarRequestOptions.FormParameters.Add("project", Openfort.Client.ClientUtils.ParameterToString(project)); // form parameter
            }
            if (contract != null)
            {
                localVarRequestOptions.FormParameters.Add("contract", Openfort.Client.ClientUtils.ParameterToString(contract)); // form parameter
            }


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<AllowFunctionResponse>("/v1/policies/{policy}/allow_functions/{id}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePolicyAllowFunction", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
