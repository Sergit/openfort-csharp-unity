/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Openfort.Client;
using Openfort.Model;

namespace Openfort.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISessionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates the session for the account.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionRequest"></param>
        /// <returns>SessionResponse</returns>
        SessionResponse CreateSession(CreateSessionRequest createSessionRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates the session for the account.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionRequest"></param>
        /// <returns>ApiResponse of SessionResponse</returns>
        ApiResponse<SessionResponse> CreateSessionWithHttpInfo(CreateSessionRequest createSessionRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of your players. The players are returned sorted by creation date, with the most recently created players appearing first.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <returns>SessionsResponse</returns>
        SessionsResponse GetPlayerSessions(string player, double? limit = default(double?), double? skip = default(double?), SortOrder? order = default(SortOrder?), List<string> expand = default(List<string>), string address = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of your players. The players are returned sorted by creation date, with the most recently created players appearing first.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <returns>ApiResponse of SessionsResponse</returns>
        ApiResponse<SessionsResponse> GetPlayerSessionsWithHttpInfo(string player, double? limit = default(double?), double? skip = default(double?), SortOrder? order = default(SortOrder?), List<string> expand = default(List<string>), string address = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a player session by session id
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>SessionResponse</returns>
        SessionResponse GetSession(string id, List<string> expand = default(List<string>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a player session by session id
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>ApiResponse of SessionResponse</returns>
        ApiResponse<SessionResponse> GetSessionWithHttpInfo(string id, List<string> expand = default(List<string>));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Revokes the session for the account.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revokeSessionRequest"></param>
        /// <returns>SessionResponse</returns>
        SessionResponse RevokeSession(RevokeSessionRequest revokeSessionRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Revokes the session for the account.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revokeSessionRequest"></param>
        /// <returns>ApiResponse of SessionResponse</returns>
        ApiResponse<SessionResponse> RevokeSessionWithHttpInfo(RevokeSessionRequest revokeSessionRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Confirms the creation of a session with an external owner.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="signatureRequest"></param>
        /// <returns>SessionResponse</returns>
        SessionResponse SignatureSession(string id, SignatureRequest signatureRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Confirms the creation of a session with an external owner.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="signatureRequest"></param>
        /// <returns>ApiResponse of SessionResponse</returns>
        ApiResponse<SessionResponse> SignatureSessionWithHttpInfo(string id, SignatureRequest signatureRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISessionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates the session for the account.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SessionResponse</returns>
        System.Threading.Tasks.Task<SessionResponse> CreateSessionAsync(CreateSessionRequest createSessionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates the session for the account.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SessionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SessionResponse>> CreateSessionWithHttpInfoAsync(CreateSessionRequest createSessionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of your players. The players are returned sorted by creation date, with the most recently created players appearing first.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SessionsResponse</returns>
        System.Threading.Tasks.Task<SessionsResponse> GetPlayerSessionsAsync(string player, double? limit = default(double?), double? skip = default(double?), SortOrder? order = default(SortOrder?), List<string> expand = default(List<string>), string address = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of your players. The players are returned sorted by creation date, with the most recently created players appearing first.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SessionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SessionsResponse>> GetPlayerSessionsWithHttpInfoAsync(string player, double? limit = default(double?), double? skip = default(double?), SortOrder? order = default(SortOrder?), List<string> expand = default(List<string>), string address = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a player session by session id
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="expand"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SessionResponse</returns>
        System.Threading.Tasks.Task<SessionResponse> GetSessionAsync(string id, List<string> expand = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a player session by session id
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="expand"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SessionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SessionResponse>> GetSessionWithHttpInfoAsync(string id, List<string> expand = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Revokes the session for the account.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revokeSessionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SessionResponse</returns>
        System.Threading.Tasks.Task<SessionResponse> RevokeSessionAsync(RevokeSessionRequest revokeSessionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Revokes the session for the account.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revokeSessionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SessionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SessionResponse>> RevokeSessionWithHttpInfoAsync(RevokeSessionRequest revokeSessionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Confirms the creation of a session with an external owner.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="signatureRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SessionResponse</returns>
        System.Threading.Tasks.Task<SessionResponse> SignatureSessionAsync(string id, SignatureRequest signatureRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Confirms the creation of a session with an external owner.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="signatureRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SessionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SessionResponse>> SignatureSessionWithHttpInfoAsync(string id, SignatureRequest signatureRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISessionsApi : ISessionsApiSync, ISessionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SessionsApi : IDisposable, ISessionsApi
    {
        private Openfort.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public SessionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public SessionsApi(string basePath)
        {
            this.Configuration = Openfort.Client.Configuration.MergeConfigurations(
                Openfort.Client.GlobalConfiguration.Instance,
                new Openfort.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Openfort.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Openfort.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public SessionsApi(Openfort.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Openfort.Client.Configuration.MergeConfigurations(
                Openfort.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Openfort.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Openfort.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public SessionsApi(Openfort.Client.ISynchronousClient client, Openfort.Client.IAsynchronousClient asyncClient, Openfort.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Openfort.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Openfort.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Openfort.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Openfort.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Openfort.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Openfort.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Creates the session for the account.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionRequest"></param>
        /// <returns>SessionResponse</returns>
        public SessionResponse CreateSession(CreateSessionRequest createSessionRequest)
        {
            Openfort.Client.ApiResponse<SessionResponse> localVarResponse = CreateSessionWithHttpInfo(createSessionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates the session for the account.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionRequest"></param>
        /// <returns>ApiResponse of SessionResponse</returns>
        public Openfort.Client.ApiResponse<SessionResponse> CreateSessionWithHttpInfo(CreateSessionRequest createSessionRequest)
        {
            // verify the required parameter 'createSessionRequest' is set
            if (createSessionRequest == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'createSessionRequest' when calling SessionsApi->CreateSession");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createSessionRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SessionResponse>("/v1/sessions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates the session for the account.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SessionResponse</returns>
        public async System.Threading.Tasks.Task<SessionResponse> CreateSessionAsync(CreateSessionRequest createSessionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = CreateSessionWithHttpInfoAsync(createSessionRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<SessionResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<SessionResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates the session for the account.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SessionResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<SessionResponse>> CreateSessionWithHttpInfoAsync(CreateSessionRequest createSessionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createSessionRequest' is set
            if (createSessionRequest == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'createSessionRequest' when calling SessionsApi->CreateSession");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createSessionRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<SessionResponse>("/v1/sessions", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of your players. The players are returned sorted by creation date, with the most recently created players appearing first.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <returns>SessionsResponse</returns>
        public SessionsResponse GetPlayerSessions(string player, double? limit = default(double?), double? skip = default(double?), SortOrder? order = default(SortOrder?), List<string> expand = default(List<string>), string address = default(string))
        {
            Openfort.Client.ApiResponse<SessionsResponse> localVarResponse = GetPlayerSessionsWithHttpInfo(player, limit, skip, order, expand, address);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of your players. The players are returned sorted by creation date, with the most recently created players appearing first.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <returns>ApiResponse of SessionsResponse</returns>
        public Openfort.Client.ApiResponse<SessionsResponse> GetPlayerSessionsWithHttpInfo(string player, double? limit = default(double?), double? skip = default(double?), SortOrder? order = default(SortOrder?), List<string> expand = default(List<string>), string address = default(string))
        {
            // verify the required parameter 'player' is set
            if (player == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'player' when calling SessionsApi->GetPlayerSessions");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "player", player));
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("multi", "expand", expand));
            }
            if (address != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "address", address));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<SessionsResponse>("/v1/sessions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlayerSessions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of your players. The players are returned sorted by creation date, with the most recently created players appearing first.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SessionsResponse</returns>
        public async System.Threading.Tasks.Task<SessionsResponse> GetPlayerSessionsAsync(string player, double? limit = default(double?), double? skip = default(double?), SortOrder? order = default(SortOrder?), List<string> expand = default(List<string>), string address = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetPlayerSessionsWithHttpInfoAsync(player, limit, skip, order, expand, address, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<SessionsResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<SessionsResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of your players. The players are returned sorted by creation date, with the most recently created players appearing first.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="expand"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SessionsResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<SessionsResponse>> GetPlayerSessionsWithHttpInfoAsync(string player, double? limit = default(double?), double? skip = default(double?), SortOrder? order = default(SortOrder?), List<string> expand = default(List<string>), string address = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'player' is set
            if (player == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'player' when calling SessionsApi->GetPlayerSessions");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "player", player));
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("multi", "expand", expand));
            }
            if (address != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "address", address));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<SessionsResponse>("/v1/sessions", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlayerSessions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a player session by session id
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>SessionResponse</returns>
        public SessionResponse GetSession(string id, List<string> expand = default(List<string>))
        {
            Openfort.Client.ApiResponse<SessionResponse> localVarResponse = GetSessionWithHttpInfo(id, expand);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a player session by session id
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="expand"> (optional)</param>
        /// <returns>ApiResponse of SessionResponse</returns>
        public Openfort.Client.ApiResponse<SessionResponse> GetSessionWithHttpInfo(string id, List<string> expand = default(List<string>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling SessionsApi->GetSession");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("multi", "expand", expand));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<SessionResponse>("/v1/sessions/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a player session by session id
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="expand"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SessionResponse</returns>
        public async System.Threading.Tasks.Task<SessionResponse> GetSessionAsync(string id, List<string> expand = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetSessionWithHttpInfoAsync(id, expand, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<SessionResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<SessionResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a player session by session id
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="expand"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SessionResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<SessionResponse>> GetSessionWithHttpInfoAsync(string id, List<string> expand = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling SessionsApi->GetSession");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("multi", "expand", expand));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<SessionResponse>("/v1/sessions/{id}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Revokes the session for the account.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revokeSessionRequest"></param>
        /// <returns>SessionResponse</returns>
        public SessionResponse RevokeSession(RevokeSessionRequest revokeSessionRequest)
        {
            Openfort.Client.ApiResponse<SessionResponse> localVarResponse = RevokeSessionWithHttpInfo(revokeSessionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Revokes the session for the account.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revokeSessionRequest"></param>
        /// <returns>ApiResponse of SessionResponse</returns>
        public Openfort.Client.ApiResponse<SessionResponse> RevokeSessionWithHttpInfo(RevokeSessionRequest revokeSessionRequest)
        {
            // verify the required parameter 'revokeSessionRequest' is set
            if (revokeSessionRequest == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'revokeSessionRequest' when calling SessionsApi->RevokeSession");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = revokeSessionRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SessionResponse>("/v1/sessions/revoke", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeSession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Revokes the session for the account.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revokeSessionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SessionResponse</returns>
        public async System.Threading.Tasks.Task<SessionResponse> RevokeSessionAsync(RevokeSessionRequest revokeSessionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = RevokeSessionWithHttpInfoAsync(revokeSessionRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<SessionResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<SessionResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Revokes the session for the account.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="revokeSessionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SessionResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<SessionResponse>> RevokeSessionWithHttpInfoAsync(RevokeSessionRequest revokeSessionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'revokeSessionRequest' is set
            if (revokeSessionRequest == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'revokeSessionRequest' when calling SessionsApi->RevokeSession");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = revokeSessionRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<SessionResponse>("/v1/sessions/revoke", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeSession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Confirms the creation of a session with an external owner.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="signatureRequest"></param>
        /// <returns>SessionResponse</returns>
        public SessionResponse SignatureSession(string id, SignatureRequest signatureRequest)
        {
            Openfort.Client.ApiResponse<SessionResponse> localVarResponse = SignatureSessionWithHttpInfo(id, signatureRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Confirms the creation of a session with an external owner.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="signatureRequest"></param>
        /// <returns>ApiResponse of SessionResponse</returns>
        public Openfort.Client.ApiResponse<SessionResponse> SignatureSessionWithHttpInfo(string id, SignatureRequest signatureRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling SessionsApi->SignatureSession");

            // verify the required parameter 'signatureRequest' is set
            if (signatureRequest == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'signatureRequest' when calling SessionsApi->SignatureSession");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = signatureRequest;

            // authentication (pk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SessionResponse>("/v1/sessions/{id}/signature", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignatureSession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Confirms the creation of a session with an external owner.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="signatureRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SessionResponse</returns>
        public async System.Threading.Tasks.Task<SessionResponse> SignatureSessionAsync(string id, SignatureRequest signatureRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = SignatureSessionWithHttpInfoAsync(id, signatureRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<SessionResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<SessionResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Confirms the creation of a session with an external owner.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="signatureRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SessionResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<SessionResponse>> SignatureSessionWithHttpInfoAsync(string id, SignatureRequest signatureRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling SessionsApi->SignatureSession");

            // verify the required parameter 'signatureRequest' is set
            if (signatureRequest == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'signatureRequest' when calling SessionsApi->SignatureSession");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = signatureRequest;

            // authentication (pk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<SessionResponse>("/v1/sessions/{id}/signature", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignatureSession", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
