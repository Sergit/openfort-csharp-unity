/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Openfort.Client.OpenAPIDateConverter;

namespace Openfort.Model
{
    /// <summary>
    /// CreatePlayerAccountRequest
    /// </summary>
    [DataContract(Name = "CreatePlayerAccountRequest")]
    public partial class CreatePlayerAccountRequest : IEquatable<CreatePlayerAccountRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePlayerAccountRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreatePlayerAccountRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePlayerAccountRequest" /> class.
        /// </summary>
        /// <param name="chainId">The chain id (required).</param>
        /// <param name="externalOwnerAddress">The address of the external owner.</param>
        public CreatePlayerAccountRequest(double chainId = default(double), string externalOwnerAddress = default(string))
        {
            this.ChainId = chainId;
            this.ExternalOwnerAddress = externalOwnerAddress;
        }

        /// <summary>
        /// The chain id
        /// </summary>
        /// <value>The chain id</value>
        [DataMember(Name = "chainId", IsRequired = true, EmitDefaultValue = true)]
        public double ChainId { get; set; }

        /// <summary>
        /// The address of the external owner
        /// </summary>
        /// <value>The address of the external owner</value>
        [DataMember(Name = "externalOwnerAddress", EmitDefaultValue = false)]
        public string ExternalOwnerAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreatePlayerAccountRequest {\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("  ExternalOwnerAddress: ").Append(ExternalOwnerAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreatePlayerAccountRequest);
        }

        /// <summary>
        /// Returns true if CreatePlayerAccountRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreatePlayerAccountRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreatePlayerAccountRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ChainId == input.ChainId ||
                    this.ChainId.Equals(input.ChainId)
                ) && 
                (
                    this.ExternalOwnerAddress == input.ExternalOwnerAddress ||
                    (this.ExternalOwnerAddress != null &&
                    this.ExternalOwnerAddress.Equals(input.ExternalOwnerAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ChainId.GetHashCode();
                if (this.ExternalOwnerAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalOwnerAddress.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
