/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Openfort.Client.OpenAPIDateConverter;

namespace Openfort.Model
{
    /// <summary>
    /// CreateSessionPlayerRequest
    /// </summary>
    [DataContract(Name = "CreateSessionPlayerRequest")]
    public partial class CreateSessionPlayerRequest : IEquatable<CreateSessionPlayerRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSessionPlayerRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateSessionPlayerRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSessionPlayerRequest" /> class.
        /// </summary>
        /// <param name="address">address (required).</param>
        /// <param name="policy">policy.</param>
        /// <param name="optimistic">optimistic.</param>
        /// <param name="externalOwnerAddress">externalOwnerAddress.</param>
        /// <param name="chainId">chainId (required).</param>
        /// <param name="validUntil">validUntil (required).</param>
        /// <param name="validAfter">validAfter (required).</param>
        /// <param name="limit">limit.</param>
        /// <param name="whitelist">whitelist.</param>
        public CreateSessionPlayerRequest(string address = default(string), string policy = default(string), bool optimistic = default(bool), string externalOwnerAddress = default(string), double chainId = default(double), double validUntil = default(double), double validAfter = default(double), double limit = default(double), List<string> whitelist = default(List<string>))
        {
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for CreateSessionPlayerRequest and cannot be null");
            }
            this.Address = address;
            this.ChainId = chainId;
            this.ValidUntil = validUntil;
            this.ValidAfter = validAfter;
            this.Policy = policy;
            this.Optimistic = optimistic;
            this.ExternalOwnerAddress = externalOwnerAddress;
            this.Limit = limit;
            this.Whitelist = whitelist;
        }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = true)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets Policy
        /// </summary>
        [DataMember(Name = "policy", EmitDefaultValue = false)]
        public string Policy { get; set; }

        /// <summary>
        /// Gets or Sets Optimistic
        /// </summary>
        [DataMember(Name = "optimistic", EmitDefaultValue = true)]
        public bool Optimistic { get; set; }

        /// <summary>
        /// Gets or Sets ExternalOwnerAddress
        /// </summary>
        [DataMember(Name = "externalOwnerAddress", EmitDefaultValue = false)]
        public string ExternalOwnerAddress { get; set; }

        /// <summary>
        /// Gets or Sets ChainId
        /// </summary>
        [DataMember(Name = "chainId", IsRequired = true, EmitDefaultValue = true)]
        public double ChainId { get; set; }

        /// <summary>
        /// Gets or Sets ValidUntil
        /// </summary>
        [DataMember(Name = "validUntil", IsRequired = true, EmitDefaultValue = true)]
        public double ValidUntil { get; set; }

        /// <summary>
        /// Gets or Sets ValidAfter
        /// </summary>
        [DataMember(Name = "validAfter", IsRequired = true, EmitDefaultValue = true)]
        public double ValidAfter { get; set; }

        /// <summary>
        /// Gets or Sets Limit
        /// </summary>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public double Limit { get; set; }

        /// <summary>
        /// Gets or Sets Whitelist
        /// </summary>
        [DataMember(Name = "whitelist", EmitDefaultValue = false)]
        public List<string> Whitelist { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateSessionPlayerRequest {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Policy: ").Append(Policy).Append("\n");
            sb.Append("  Optimistic: ").Append(Optimistic).Append("\n");
            sb.Append("  ExternalOwnerAddress: ").Append(ExternalOwnerAddress).Append("\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("  ValidUntil: ").Append(ValidUntil).Append("\n");
            sb.Append("  ValidAfter: ").Append(ValidAfter).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Whitelist: ").Append(Whitelist).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateSessionPlayerRequest);
        }

        /// <summary>
        /// Returns true if CreateSessionPlayerRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateSessionPlayerRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateSessionPlayerRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Policy == input.Policy ||
                    (this.Policy != null &&
                    this.Policy.Equals(input.Policy))
                ) && 
                (
                    this.Optimistic == input.Optimistic ||
                    this.Optimistic.Equals(input.Optimistic)
                ) && 
                (
                    this.ExternalOwnerAddress == input.ExternalOwnerAddress ||
                    (this.ExternalOwnerAddress != null &&
                    this.ExternalOwnerAddress.Equals(input.ExternalOwnerAddress))
                ) && 
                (
                    this.ChainId == input.ChainId ||
                    this.ChainId.Equals(input.ChainId)
                ) && 
                (
                    this.ValidUntil == input.ValidUntil ||
                    this.ValidUntil.Equals(input.ValidUntil)
                ) && 
                (
                    this.ValidAfter == input.ValidAfter ||
                    this.ValidAfter.Equals(input.ValidAfter)
                ) && 
                (
                    this.Limit == input.Limit ||
                    this.Limit.Equals(input.Limit)
                ) && 
                (
                    this.Whitelist == input.Whitelist ||
                    this.Whitelist != null &&
                    input.Whitelist != null &&
                    this.Whitelist.SequenceEqual(input.Whitelist)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.Policy != null)
                {
                    hashCode = (hashCode * 59) + this.Policy.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Optimistic.GetHashCode();
                if (this.ExternalOwnerAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalOwnerAddress.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ChainId.GetHashCode();
                hashCode = (hashCode * 59) + this.ValidUntil.GetHashCode();
                hashCode = (hashCode * 59) + this.ValidAfter.GetHashCode();
                hashCode = (hashCode * 59) + this.Limit.GetHashCode();
                if (this.Whitelist != null)
                {
                    hashCode = (hashCode * 59) + this.Whitelist.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
