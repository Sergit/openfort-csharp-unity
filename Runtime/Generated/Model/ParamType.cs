/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Openfort.Client.OpenAPIDateConverter;

namespace Openfort.Model
{
    /// <summary>
    /// ParamType
    /// </summary>
    [DataContract(Name = "ParamType")]
    public partial class ParamType : IEquatable<ParamType>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParamType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ParamType() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ParamType" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="baseType">baseType (required).</param>
        /// <param name="indexed">indexed (required).</param>
        /// <param name="components">components (required).</param>
        /// <param name="arrayLength">arrayLength (required).</param>
        /// <param name="arrayChildren">arrayChildren (required).</param>
        /// <param name="isParamType">isParamType (required).</param>
        public ParamType(string name = default(string), string type = default(string), string baseType = default(string), bool indexed = default(bool), List<ParamType> components = default(List<ParamType>), double arrayLength = default(double), ParamType arrayChildren = default(ParamType), bool isParamType = default(bool))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ParamType and cannot be null");
            }
            this.Name = name;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for ParamType and cannot be null");
            }
            this.Type = type;
            // to ensure "baseType" is required (not null)
            if (baseType == null)
            {
                throw new ArgumentNullException("baseType is a required property for ParamType and cannot be null");
            }
            this.BaseType = baseType;
            this.Indexed = indexed;
            // to ensure "components" is required (not null)
            if (components == null)
            {
                throw new ArgumentNullException("components is a required property for ParamType and cannot be null");
            }
            this.Components = components;
            this.ArrayLength = arrayLength;
            // to ensure "arrayChildren" is required (not null)
            if (arrayChildren == null)
            {
                throw new ArgumentNullException("arrayChildren is a required property for ParamType and cannot be null");
            }
            this.ArrayChildren = arrayChildren;
            this.IsParamType = isParamType;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets BaseType
        /// </summary>
        [DataMember(Name = "baseType", IsRequired = true, EmitDefaultValue = true)]
        public string BaseType { get; set; }

        /// <summary>
        /// Gets or Sets Indexed
        /// </summary>
        [DataMember(Name = "indexed", IsRequired = true, EmitDefaultValue = true)]
        public bool Indexed { get; set; }

        /// <summary>
        /// Gets or Sets Components
        /// </summary>
        [DataMember(Name = "components", IsRequired = true, EmitDefaultValue = true)]
        public List<ParamType> Components { get; set; }

        /// <summary>
        /// Gets or Sets ArrayLength
        /// </summary>
        [DataMember(Name = "arrayLength", IsRequired = true, EmitDefaultValue = true)]
        public double ArrayLength { get; set; }

        /// <summary>
        /// Gets or Sets ArrayChildren
        /// </summary>
        [DataMember(Name = "arrayChildren", IsRequired = true, EmitDefaultValue = true)]
        public ParamType ArrayChildren { get; set; }

        /// <summary>
        /// Gets or Sets IsParamType
        /// </summary>
        [DataMember(Name = "_isParamType", IsRequired = true, EmitDefaultValue = true)]
        public bool IsParamType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ParamType {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  BaseType: ").Append(BaseType).Append("\n");
            sb.Append("  Indexed: ").Append(Indexed).Append("\n");
            sb.Append("  Components: ").Append(Components).Append("\n");
            sb.Append("  ArrayLength: ").Append(ArrayLength).Append("\n");
            sb.Append("  ArrayChildren: ").Append(ArrayChildren).Append("\n");
            sb.Append("  IsParamType: ").Append(IsParamType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParamType);
        }

        /// <summary>
        /// Returns true if ParamType instances are equal
        /// </summary>
        /// <param name="input">Instance of ParamType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParamType input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.BaseType == input.BaseType ||
                    (this.BaseType != null &&
                    this.BaseType.Equals(input.BaseType))
                ) && 
                (
                    this.Indexed == input.Indexed ||
                    this.Indexed.Equals(input.Indexed)
                ) && 
                (
                    this.Components == input.Components ||
                    this.Components != null &&
                    input.Components != null &&
                    this.Components.SequenceEqual(input.Components)
                ) && 
                (
                    this.ArrayLength == input.ArrayLength ||
                    this.ArrayLength.Equals(input.ArrayLength)
                ) && 
                (
                    this.ArrayChildren == input.ArrayChildren ||
                    (this.ArrayChildren != null &&
                    this.ArrayChildren.Equals(input.ArrayChildren))
                ) && 
                (
                    this.IsParamType == input.IsParamType ||
                    this.IsParamType.Equals(input.IsParamType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.BaseType != null)
                {
                    hashCode = (hashCode * 59) + this.BaseType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Indexed.GetHashCode();
                if (this.Components != null)
                {
                    hashCode = (hashCode * 59) + this.Components.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ArrayLength.GetHashCode();
                if (this.ArrayChildren != null)
                {
                    hashCode = (hashCode * 59) + this.ArrayChildren.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsParamType.GetHashCode();
                return hashCode;
            }
        }

    }

}
