/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Openfort.Client.OpenAPIDateConverter;

namespace Openfort.Model
{
    /// <summary>
    /// ResponseResponse
    /// </summary>
    [DataContract(Name = "ResponseResponse")]
    public partial class ResponseResponse : IEquatable<ResponseResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ResponseResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseResponse" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="blockNumber">blockNumber.</param>
        /// <param name="transactionHash">transactionHash.</param>
        /// <param name="gasUsed">gasUsed.</param>
        /// <param name="status">status.</param>
        /// <param name="logs">logs.</param>
        /// <param name="to">to.</param>
        /// <param name="error">error.</param>
        public ResponseResponse(int createdAt = default(int), double blockNumber = default(double), string transactionHash = default(string), double gasUsed = default(double), double status = default(double), List<Log> logs = default(List<Log>), string to = default(string), Object error = default(Object))
        {
            this.CreatedAt = createdAt;
            this.BlockNumber = blockNumber;
            this.TransactionHash = transactionHash;
            this.GasUsed = gasUsed;
            this.Status = status;
            this.Logs = logs;
            this.To = to;
            this.Error = error;
        }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public int CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets BlockNumber
        /// </summary>
        [DataMember(Name = "blockNumber", EmitDefaultValue = false)]
        public double BlockNumber { get; set; }

        /// <summary>
        /// Gets or Sets TransactionHash
        /// </summary>
        [DataMember(Name = "transactionHash", EmitDefaultValue = false)]
        public string TransactionHash { get; set; }

        /// <summary>
        /// Gets or Sets GasUsed
        /// </summary>
        [DataMember(Name = "gasUsed", EmitDefaultValue = false)]
        public double GasUsed { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public double Status { get; set; }

        /// <summary>
        /// Gets or Sets Logs
        /// </summary>
        [DataMember(Name = "logs", EmitDefaultValue = false)]
        public List<Log> Logs { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        public string To { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "error", EmitDefaultValue = true)]
        public Object Error { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResponseResponse {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  BlockNumber: ").Append(BlockNumber).Append("\n");
            sb.Append("  TransactionHash: ").Append(TransactionHash).Append("\n");
            sb.Append("  GasUsed: ").Append(GasUsed).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Logs: ").Append(Logs).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResponseResponse);
        }

        /// <summary>
        /// Returns true if ResponseResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ResponseResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResponseResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CreatedAt == input.CreatedAt ||
                    this.CreatedAt.Equals(input.CreatedAt)
                ) && 
                (
                    this.BlockNumber == input.BlockNumber ||
                    this.BlockNumber.Equals(input.BlockNumber)
                ) && 
                (
                    this.TransactionHash == input.TransactionHash ||
                    (this.TransactionHash != null &&
                    this.TransactionHash.Equals(input.TransactionHash))
                ) && 
                (
                    this.GasUsed == input.GasUsed ||
                    this.GasUsed.Equals(input.GasUsed)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Logs == input.Logs ||
                    this.Logs != null &&
                    input.Logs != null &&
                    this.Logs.SequenceEqual(input.Logs)
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                hashCode = (hashCode * 59) + this.BlockNumber.GetHashCode();
                if (this.TransactionHash != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionHash.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.GasUsed.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.Logs != null)
                {
                    hashCode = (hashCode * 59) + this.Logs.GetHashCode();
                }
                if (this.To != null)
                {
                    hashCode = (hashCode * 59) + this.To.GetHashCode();
                }
                if (this.Error != null)
                {
                    hashCode = (hashCode * 59) + this.Error.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
