/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Openfort.OpenfortSDK.Model
{
    /// <summary>
    /// EcosystemConfigurationResponse
    /// </summary>
    [DataContract(Name = "EcosystemConfigurationResponse")]
    public partial class EcosystemConfigurationResponse : IEquatable<EcosystemConfigurationResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EcosystemConfigurationResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EcosystemConfigurationResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EcosystemConfigurationResponse" /> class.
        /// </summary>
        /// <param name="customDomain">Subdomain of the ecosystem. (required).</param>
        /// <param name="primaryColor">Primary color of the ecosystem. (required).</param>
        /// <param name="primaryColorForeground">Primary color foreground of the ecosystem. (required).</param>
        /// <param name="radius">Radius of the ecosystem. (required).</param>
        /// <param name="logoUrl">Logo URL of the ecosystem. (required).</param>
        /// <param name="ecosystemWalletDomains">Whitelisted frontend domains of the ecosystem. (required).</param>
        /// <param name="termsOfServiceUrl">Terms of service URL.</param>
        /// <param name="privacyPolicyUrl">Privacy policy URL.</param>
        /// <param name="faviconUrl">Favicon URL.</param>
        /// <param name="dashboardExamples">Examples of the ecosystem..</param>
        /// <param name="dashboardSDKs">SDKs of the ecosystem..</param>

        public EcosystemConfigurationResponse(
            string customDomain = default(string),
            string primaryColor = default(string),
            string primaryColorForeground = default(string),
            string radius = default(string),
            string logoUrl = default(string),
            List<string> ecosystemWalletDomains = default(List<string>),
            string termsOfServiceUrl = default(string),
            string privacyPolicyUrl = default(string),
            string faviconUrl = default(string),
            List<Dictionary<string, object>> dashboardExamples = default(List<Dictionary<string, object>>),
            List<Dictionary<string, object>> dashboardSDKs = default
        )
        {
            // to ensure "customDomain" is required (not null)
            if (customDomain == null)
            {
                throw new ArgumentNullException("customDomain is a required property for EcosystemConfigurationResponse and cannot be null");
            }
            this.CustomDomain = customDomain;
            // to ensure "primaryColor" is required (not null)
            if (primaryColor == null)
            {
                throw new ArgumentNullException("primaryColor is a required property for EcosystemConfigurationResponse and cannot be null");
            }
            this.PrimaryColor = primaryColor;
            // to ensure "primaryColorForeground" is required (not null)
            if (primaryColorForeground == null)
            {
                throw new ArgumentNullException("primaryColorForeground is a required property for EcosystemConfigurationResponse and cannot be null");
            }
            this.PrimaryColorForeground = primaryColorForeground;
            // to ensure "radius" is required (not null)
            if (radius == null)
            {
                throw new ArgumentNullException("radius is a required property for EcosystemConfigurationResponse and cannot be null");
            }
            this.Radius = radius;
            // to ensure "logoUrl" is required (not null)
            if (logoUrl == null)
            {
                throw new ArgumentNullException("logoUrl is a required property for EcosystemConfigurationResponse and cannot be null");
            }
            this.LogoUrl = logoUrl;
            // to ensure "ecosystemWalletDomains" is required (not null)
            if (ecosystemWalletDomains == null)
            {
                throw new ArgumentNullException("ecosystemWalletDomains is a required property for EcosystemConfigurationResponse and cannot be null");
            }
            this.EcosystemWalletDomains = ecosystemWalletDomains;
            this.TermsOfServiceUrl = termsOfServiceUrl;
            this.PrivacyPolicyUrl = privacyPolicyUrl;
            this.FaviconUrl = faviconUrl;
            this.DashboardExamples = dashboardExamples;
            this.DashboardSDKs = dashboardSDKs;
        }
        /// <summary>
        /// Subdomain of the ecosystem.
        /// </summary>
        /// <value>Subdomain of the ecosystem.</value>
        [DataMember(Name = "customDomain", IsRequired = true, EmitDefaultValue = true)]
        public string CustomDomain { get; set; }

        /// <summary>
        /// Primary color of the ecosystem.
        /// </summary>
        /// <value>Primary color of the ecosystem.</value>
        [DataMember(Name = "primaryColor", IsRequired = true, EmitDefaultValue = true)]
        public string PrimaryColor { get; set; }

        /// <summary>
        /// Primary color foreground of the ecosystem.
        /// </summary>
        /// <value>Primary color foreground of the ecosystem.</value>
        [DataMember(Name = "primaryColorForeground", IsRequired = true, EmitDefaultValue = true)]
        public string PrimaryColorForeground { get; set; }

        /// <summary>
        /// Radius of the ecosystem.
        /// </summary>
        /// <value>Radius of the ecosystem.</value>
        [DataMember(Name = "radius", IsRequired = true, EmitDefaultValue = true)]
        public string Radius { get; set; }

        /// <summary>
        /// Logo URL of the ecosystem.
        /// </summary>
        /// <value>Logo URL of the ecosystem.</value>
        [DataMember(Name = "logoUrl", IsRequired = true, EmitDefaultValue = true)]
        public string LogoUrl { get; set; }

        /// <summary>
        /// Whitelisted frontend domains of the ecosystem.
        /// </summary>
        /// <value>Whitelisted frontend domains of the ecosystem.</value>
        [DataMember(Name = "ecosystemWalletDomains", IsRequired = true, EmitDefaultValue = true)]
        public List<string> EcosystemWalletDomains { get; set; }

        /// <summary>
        /// Terms of service URL
        /// </summary>
        /// <value>Terms of service URL</value>
        /// <example>&quot;https://example.com/terms&quot;</example>
        [DataMember(Name = "termsOfServiceUrl", EmitDefaultValue = false)]
        public string TermsOfServiceUrl { get; set; }

        /// <summary>
        /// Privacy policy URL
        /// </summary>
        /// <value>Privacy policy URL</value>
        /// <example>&quot;https://example.com/privacy&quot;</example>
        [DataMember(Name = "privacyPolicyUrl", EmitDefaultValue = false)]
        public string PrivacyPolicyUrl { get; set; }

        /// <summary>
        /// Favicon URL
        /// </summary>
        /// <value>Favicon URL</value>
        /// <example>&quot;https://example.com/favicon.ico&quot;</example>
        [DataMember(Name = "faviconUrl", EmitDefaultValue = false)]
        public string FaviconUrl { get; set; }

        /// <summary>
        /// Examples of the ecosystem.
        /// </summary>
        /// <value>Examples of the ecosystem.</value>
        [DataMember(Name = "dashboardExamples", EmitDefaultValue = false)]
        public List<Dictionary<string, object>> DashboardExamples { get; set; }

        /// <summary>
        /// SDKs of the ecosystem.
        /// </summary>
        /// <value>SDKs of the ecosystem.</value>
        [DataMember(Name = "dashboardSDKs", EmitDefaultValue = false)]
        public List<Dictionary<string, object>> DashboardSDKs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EcosystemConfigurationResponse {\n");
            sb.Append("  CustomDomain: ").Append(CustomDomain).Append("\n");
            sb.Append("  PrimaryColor: ").Append(PrimaryColor).Append("\n");
            sb.Append("  PrimaryColorForeground: ").Append(PrimaryColorForeground).Append("\n");
            sb.Append("  Radius: ").Append(Radius).Append("\n");
            sb.Append("  LogoUrl: ").Append(LogoUrl).Append("\n");
            sb.Append("  EcosystemWalletDomains: ").Append(EcosystemWalletDomains).Append("\n");
            sb.Append("  TermsOfServiceUrl: ").Append(TermsOfServiceUrl).Append("\n");
            sb.Append("  PrivacyPolicyUrl: ").Append(PrivacyPolicyUrl).Append("\n");
            sb.Append("  FaviconUrl: ").Append(FaviconUrl).Append("\n");
            sb.Append("  DashboardExamples: ").Append(DashboardExamples).Append("\n");
            sb.Append("  DashboardSDKs: ").Append(DashboardSDKs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EcosystemConfigurationResponse);
        }

        /// <summary>
        /// Returns true if EcosystemConfigurationResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EcosystemConfigurationResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EcosystemConfigurationResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.CustomDomain == input.CustomDomain ||
                    (this.CustomDomain != null &&
                    this.CustomDomain.Equals(input.CustomDomain))
                ) &&
                (
                    this.PrimaryColor == input.PrimaryColor ||
                    (this.PrimaryColor != null &&
                    this.PrimaryColor.Equals(input.PrimaryColor))
                ) &&
                (
                    this.PrimaryColorForeground == input.PrimaryColorForeground ||
                    (this.PrimaryColorForeground != null &&
                    this.PrimaryColorForeground.Equals(input.PrimaryColorForeground))
                ) &&
                (
                    this.Radius == input.Radius ||
                    (this.Radius != null &&
                    this.Radius.Equals(input.Radius))
                ) &&
                (
                    this.LogoUrl == input.LogoUrl ||
                    (this.LogoUrl != null &&
                    this.LogoUrl.Equals(input.LogoUrl))
                ) &&
                (
                    this.EcosystemWalletDomains == input.EcosystemWalletDomains ||
                    this.EcosystemWalletDomains != null &&
                    input.EcosystemWalletDomains != null &&
                    this.EcosystemWalletDomains.SequenceEqual(input.EcosystemWalletDomains)
                ) &&
                (
                    this.TermsOfServiceUrl == input.TermsOfServiceUrl ||
                    (this.TermsOfServiceUrl != null &&
                    this.TermsOfServiceUrl.Equals(input.TermsOfServiceUrl))
                ) &&
                (
                    this.PrivacyPolicyUrl == input.PrivacyPolicyUrl ||
                    (this.PrivacyPolicyUrl != null &&
                    this.PrivacyPolicyUrl.Equals(input.PrivacyPolicyUrl))
                ) &&
                (
                    this.FaviconUrl == input.FaviconUrl ||
                    (this.FaviconUrl != null &&
                    this.FaviconUrl.Equals(input.FaviconUrl))
                ) &&
                (
                    this.DashboardExamples == input.DashboardExamples ||
                    this.DashboardExamples != null &&
                    input.DashboardExamples != null &&
                    this.DashboardExamples.SequenceEqual(input.DashboardExamples)
                ) &&
                (
                    this.DashboardSDKs == input.DashboardSDKs ||
                    this.DashboardSDKs != null &&
                    input.DashboardSDKs != null &&
                    this.DashboardSDKs.SequenceEqual(input.DashboardSDKs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomDomain != null)
                {
                    hashCode = (hashCode * 59) + this.CustomDomain.GetHashCode();
                }
                if (this.PrimaryColor != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryColor.GetHashCode();
                }
                if (this.PrimaryColorForeground != null)
                {
                    hashCode = (hashCode * 59) + this.PrimaryColorForeground.GetHashCode();
                }
                if (this.Radius != null)
                {
                    hashCode = (hashCode * 59) + this.Radius.GetHashCode();
                }
                if (this.LogoUrl != null)
                {
                    hashCode = (hashCode * 59) + this.LogoUrl.GetHashCode();
                }
                if (this.EcosystemWalletDomains != null)
                {
                    hashCode = (hashCode * 59) + this.EcosystemWalletDomains.GetHashCode();
                }
                if (this.TermsOfServiceUrl != null)
                {
                    hashCode = (hashCode * 59) + this.TermsOfServiceUrl.GetHashCode();
                }
                if (this.PrivacyPolicyUrl != null)
                {
                    hashCode = (hashCode * 59) + this.PrivacyPolicyUrl.GetHashCode();
                }
                if (this.FaviconUrl != null)
                {
                    hashCode = (hashCode * 59) + this.FaviconUrl.GetHashCode();
                }
                if (this.DashboardExamples != null)
                {
                    hashCode = (hashCode * 59) + this.DashboardExamples.GetHashCode();
                }
                if (this.DashboardSDKs != null)
                {
                    hashCode = (hashCode * 59) + this.DashboardSDKs.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
