/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Openfort.OpenfortSDK.Model
{
    /// <summary>
    /// PolicyReportTransactionIntentsQueries
    /// </summary>
    [DataContract(Name = "PolicyReportTransactionIntentsQueries")]
    public partial class PolicyReportTransactionIntentsQueries : IEquatable<PolicyReportTransactionIntentsQueries>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PolicyReportTransactionIntentsQueries" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PolicyReportTransactionIntentsQueries() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PolicyReportTransactionIntentsQueries" /> class.
        /// </summary>
        /// <param name="to">The start date of the period in unix timestamp. (required).</param>
        /// <param name="from">The end date of the period in unix timestamp. (required).</param>
        public PolicyReportTransactionIntentsQueries(double to = default(double), double from = default(double))
        {
            this.To = to;
            this.From = from;
        }

        /// <summary>
        /// The start date of the period in unix timestamp.
        /// </summary>
        /// <value>The start date of the period in unix timestamp.</value>
        /// <example>1612137600</example>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = true)]
        public double To { get; set; }

        /// <summary>
        /// The end date of the period in unix timestamp.
        /// </summary>
        /// <value>The end date of the period in unix timestamp.</value>
        /// <example>1612137600</example>
        [DataMember(Name = "from", IsRequired = true, EmitDefaultValue = true)]
        public double From { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PolicyReportTransactionIntentsQueries {\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PolicyReportTransactionIntentsQueries);
        }

        /// <summary>
        /// Returns true if PolicyReportTransactionIntentsQueries instances are equal
        /// </summary>
        /// <param name="input">Instance of PolicyReportTransactionIntentsQueries to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PolicyReportTransactionIntentsQueries input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.To == input.To ||
                    this.To.Equals(input.To)
                ) &&
                (
                    this.From == input.From ||
                    this.From.Equals(input.From)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.To.GetHashCode();
                hashCode = (hashCode * 59) + this.From.GetHashCode();
                return hashCode;
            }
        }

    }

}
