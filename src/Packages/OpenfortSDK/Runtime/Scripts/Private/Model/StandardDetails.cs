/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Openfort.OpenfortSDK.Model
{
    /// <summary>
    /// StandardDetails
    /// </summary>
    [DataContract(Name = "StandardDetails")]
    public partial class StandardDetails : IEquatable<StandardDetails>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StandardDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StandardDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StandardDetails" /> class.
        /// </summary>
        /// <param name="from">The transaction sender. (required).</param>
        /// <param name="to">The transaction recipient or contract address. (required).</param>
        /// <param name="data">A contract hashed method call with encoded args..</param>
        /// <param name="nonce">Unique number identifying this transaction. (required).</param>
        /// <param name="gas">The gas limit for the transaction. (required).</param>
        /// <param name="maxFeePerGas">Total fee per gas (in wei), inclusive of &#x60;maxPriorityFeePerGas&#x60;. Only applies to EIP-1559 Transactions. (required).</param>
        /// <param name="maxPriorityFeePerGas">Max priority fee per gas (in wei). Only applies to EIP-1559 Transactions. (required).</param>
        /// <param name="value">Value in wei sent with this transaction..</param>
        public StandardDetails(string from = default(string), string to = default(string), string data = default(string), string nonce = default(string), string gas = default(string), string maxFeePerGas = default(string), string maxPriorityFeePerGas = default(string), string value = default(string))
        {
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new ArgumentNullException("from is a required property for StandardDetails and cannot be null");
            }
            this.From = from;
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new ArgumentNullException("to is a required property for StandardDetails and cannot be null");
            }
            this.To = to;
            // to ensure "nonce" is required (not null)
            if (nonce == null)
            {
                throw new ArgumentNullException("nonce is a required property for StandardDetails and cannot be null");
            }
            this.Nonce = nonce;
            // to ensure "gas" is required (not null)
            if (gas == null)
            {
                throw new ArgumentNullException("gas is a required property for StandardDetails and cannot be null");
            }
            this.Gas = gas;
            // to ensure "maxFeePerGas" is required (not null)
            if (maxFeePerGas == null)
            {
                throw new ArgumentNullException("maxFeePerGas is a required property for StandardDetails and cannot be null");
            }
            this.MaxFeePerGas = maxFeePerGas;
            // to ensure "maxPriorityFeePerGas" is required (not null)
            if (maxPriorityFeePerGas == null)
            {
                throw new ArgumentNullException("maxPriorityFeePerGas is a required property for StandardDetails and cannot be null");
            }
            this.MaxPriorityFeePerGas = maxPriorityFeePerGas;
            this.Data = data;
            this.Value = value;
        }

        /// <summary>
        /// The transaction sender.
        /// </summary>
        /// <value>The transaction sender.</value>
        /// <example>&quot;0x8ab66318aCC6b29A27e74e534bfe3ecf81C50387&quot;</example>
        [DataMember(Name = "from", IsRequired = true, EmitDefaultValue = true)]
        public string From { get; set; }

        /// <summary>
        /// The transaction recipient or contract address.
        /// </summary>
        /// <value>The transaction recipient or contract address.</value>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = true)]
        public string To { get; set; }

        /// <summary>
        /// A contract hashed method call with encoded args.
        /// </summary>
        /// <value>A contract hashed method call with encoded args.</value>
        /// <example>&quot;0x8c5a...&quot;</example>
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public string Data { get; set; }

        /// <summary>
        /// Unique number identifying this transaction.
        /// </summary>
        /// <value>Unique number identifying this transaction.</value>
        /// <example>&quot;0&quot;</example>
        [DataMember(Name = "nonce", IsRequired = true, EmitDefaultValue = true)]
        public string Nonce { get; set; }

        /// <summary>
        /// The gas limit for the transaction.
        /// </summary>
        /// <value>The gas limit for the transaction.</value>
        /// <example>&quot;21000&quot;</example>
        [DataMember(Name = "gas", IsRequired = true, EmitDefaultValue = true)]
        public string Gas { get; set; }

        /// <summary>
        /// Total fee per gas (in wei), inclusive of &#x60;maxPriorityFeePerGas&#x60;. Only applies to EIP-1559 Transactions.
        /// </summary>
        /// <value>Total fee per gas (in wei), inclusive of &#x60;maxPriorityFeePerGas&#x60;. Only applies to EIP-1559 Transactions.</value>
        /// <example>&quot;1000000000&quot;</example>
        [DataMember(Name = "maxFeePerGas", IsRequired = true, EmitDefaultValue = true)]
        public string MaxFeePerGas { get; set; }

        /// <summary>
        /// Max priority fee per gas (in wei). Only applies to EIP-1559 Transactions.
        /// </summary>
        /// <value>Max priority fee per gas (in wei). Only applies to EIP-1559 Transactions.</value>
        /// <example>&quot;1000000000&quot;</example>
        [DataMember(Name = "maxPriorityFeePerGas", IsRequired = true, EmitDefaultValue = true)]
        public string MaxPriorityFeePerGas { get; set; }

        /// <summary>
        /// Value in wei sent with this transaction.
        /// </summary>
        /// <value>Value in wei sent with this transaction.</value>
        /// <example>&quot;0x8ab66318aCC6b29A27e74e534bfe3ecf81C50387&quot;</example>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StandardDetails {\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Nonce: ").Append(Nonce).Append("\n");
            sb.Append("  Gas: ").Append(Gas).Append("\n");
            sb.Append("  MaxFeePerGas: ").Append(MaxFeePerGas).Append("\n");
            sb.Append("  MaxPriorityFeePerGas: ").Append(MaxPriorityFeePerGas).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StandardDetails);
        }

        /// <summary>
        /// Returns true if StandardDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of StandardDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StandardDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) &&
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) &&
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) &&
                (
                    this.Nonce == input.Nonce ||
                    (this.Nonce != null &&
                    this.Nonce.Equals(input.Nonce))
                ) &&
                (
                    this.Gas == input.Gas ||
                    (this.Gas != null &&
                    this.Gas.Equals(input.Gas))
                ) &&
                (
                    this.MaxFeePerGas == input.MaxFeePerGas ||
                    (this.MaxFeePerGas != null &&
                    this.MaxFeePerGas.Equals(input.MaxFeePerGas))
                ) &&
                (
                    this.MaxPriorityFeePerGas == input.MaxPriorityFeePerGas ||
                    (this.MaxPriorityFeePerGas != null &&
                    this.MaxPriorityFeePerGas.Equals(input.MaxPriorityFeePerGas))
                ) &&
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.From != null)
                {
                    hashCode = (hashCode * 59) + this.From.GetHashCode();
                }
                if (this.To != null)
                {
                    hashCode = (hashCode * 59) + this.To.GetHashCode();
                }
                if (this.Data != null)
                {
                    hashCode = (hashCode * 59) + this.Data.GetHashCode();
                }
                if (this.Nonce != null)
                {
                    hashCode = (hashCode * 59) + this.Nonce.GetHashCode();
                }
                if (this.Gas != null)
                {
                    hashCode = (hashCode * 59) + this.Gas.GetHashCode();
                }
                if (this.MaxFeePerGas != null)
                {
                    hashCode = (hashCode * 59) + this.MaxFeePerGas.GetHashCode();
                }
                if (this.MaxPriorityFeePerGas != null)
                {
                    hashCode = (hashCode * 59) + this.MaxPriorityFeePerGas.GetHashCode();
                }
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
