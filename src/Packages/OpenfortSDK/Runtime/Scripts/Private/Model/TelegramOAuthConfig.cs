/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Openfort.OpenfortSDK.Model
{
    /// <summary>
    /// TelegramOAuthConfig
    /// </summary>
    [DataContract(Name = "TelegramOAuthConfig")]
    public partial class TelegramOAuthConfig : IEquatable<TelegramOAuthConfig>
    {

        /// <summary>
        /// Gets or Sets Provider
        /// </summary>
        [DataMember(Name = "provider", IsRequired = true, EmitDefaultValue = true)]
        public OAuthProviderTELEGRAM Provider { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TelegramOAuthConfig" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TelegramOAuthConfig() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TelegramOAuthConfig" /> class.
        /// </summary>
        /// <param name="enabled">Enable OAuth provider. (required).</param>
        /// <param name="provider">provider (required).</param>
        /// <param name="botUsername">Telegram bot username. (required).</param>
        /// <param name="botToken">Telegram bot token. (required).</param>
        public TelegramOAuthConfig(bool enabled = default(bool), OAuthProviderTELEGRAM provider = default(OAuthProviderTELEGRAM), string botUsername = default(string), string botToken = default(string))
        {
            this.Enabled = enabled;
            this.Provider = provider;
            // to ensure "botUsername" is required (not null)
            if (botUsername == null)
            {
                throw new ArgumentNullException("botUsername is a required property for TelegramOAuthConfig and cannot be null");
            }
            this.BotUsername = botUsername;
            // to ensure "botToken" is required (not null)
            if (botToken == null)
            {
                throw new ArgumentNullException("botToken is a required property for TelegramOAuthConfig and cannot be null");
            }
            this.BotToken = botToken;
        }

        /// <summary>
        /// Enable OAuth provider.
        /// </summary>
        /// <value>Enable OAuth provider.</value>
        [DataMember(Name = "enabled", IsRequired = true, EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Telegram bot username.
        /// </summary>
        /// <value>Telegram bot username.</value>
        [DataMember(Name = "botUsername", IsRequired = true, EmitDefaultValue = true)]
        public string BotUsername { get; set; }

        /// <summary>
        /// Telegram bot token.
        /// </summary>
        /// <value>Telegram bot token.</value>
        [DataMember(Name = "botToken", IsRequired = true, EmitDefaultValue = true)]
        public string BotToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TelegramOAuthConfig {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  BotUsername: ").Append(BotUsername).Append("\n");
            sb.Append("  BotToken: ").Append(BotToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TelegramOAuthConfig);
        }

        /// <summary>
        /// Returns true if TelegramOAuthConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of TelegramOAuthConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TelegramOAuthConfig input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                ) &&
                (
                    this.Provider == input.Provider ||
                    this.Provider.Equals(input.Provider)
                ) &&
                (
                    this.BotUsername == input.BotUsername ||
                    (this.BotUsername != null &&
                    this.BotUsername.Equals(input.BotUsername))
                ) &&
                (
                    this.BotToken == input.BotToken ||
                    (this.BotToken != null &&
                    this.BotToken.Equals(input.BotToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Enabled.GetHashCode();
                hashCode = (hashCode * 59) + this.Provider.GetHashCode();
                if (this.BotUsername != null)
                {
                    hashCode = (hashCode * 59) + this.BotUsername.GetHashCode();
                }
                if (this.BotToken != null)
                {
                    hashCode = (hashCode * 59) + this.BotToken.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
