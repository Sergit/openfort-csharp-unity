/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Openfort.OpenfortSDK.Model
{
    /// <summary>
    /// TypedDomainData
    /// </summary>
    [DataContract(Name = "TypedDomainData")]
    public partial class TypedDomainData : IEquatable<TypedDomainData>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TypedDomainData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TypedDomainData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TypedDomainData" /> class.
        /// </summary>
        /// <param name="chainId">The chain ID. (required).</param>
        /// <param name="name">The user readable name of signing domain, i.e. the name of the DApp or the protocol...</param>
        /// <param name="version">The current major version of the signing domain. Signatures from different versions are not compatible..</param>
        /// <param name="verifyingContract">The address of the contract that will verify the signature. The user-agent may do contract specific phishing prevention..</param>
        /// <param name="salt">An disambiguating salt for the protocol. This can be used as a domain separator of last resort..</param>
        public TypedDomainData(int chainId = default(int), string name = default(string), string version = default(string), string verifyingContract = default(string), string salt = default(string))
        {
            this.ChainId = chainId;
            this.Name = name;
            this._Version = version;
            this.VerifyingContract = verifyingContract;
            this.Salt = salt;
        }

        /// <summary>
        /// The chain ID.
        /// </summary>
        /// <value>The chain ID.</value>
        /// <example>80002</example>
        [DataMember(Name = "chainId", IsRequired = true, EmitDefaultValue = true)]
        public int ChainId { get; set; }

        /// <summary>
        /// The user readable name of signing domain, i.e. the name of the DApp or the protocol..
        /// </summary>
        /// <value>The user readable name of signing domain, i.e. the name of the DApp or the protocol..</value>
        /// <example>&quot;Openfort&quot;</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The current major version of the signing domain. Signatures from different versions are not compatible.
        /// </summary>
        /// <value>The current major version of the signing domain. Signatures from different versions are not compatible.</value>
        /// <example>&quot;1&quot;</example>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public string _Version { get; set; }

        /// <summary>
        /// The address of the contract that will verify the signature. The user-agent may do contract specific phishing prevention.
        /// </summary>
        /// <value>The address of the contract that will verify the signature. The user-agent may do contract specific phishing prevention.</value>
        /// <example>&quot;0x64452Dff1180b21dc50033e1680bB64CDd492582&quot;</example>
        [DataMember(Name = "verifyingContract", EmitDefaultValue = false)]
        public string VerifyingContract { get; set; }

        /// <summary>
        /// An disambiguating salt for the protocol. This can be used as a domain separator of last resort.
        /// </summary>
        /// <value>An disambiguating salt for the protocol. This can be used as a domain separator of last resort.</value>
        /// <example>&quot;0xf2d857f4a3edcb9b78b4d503bfe733db1e3f6cdc2b7971ee739626c97e86a558&quot;</example>
        [DataMember(Name = "salt", EmitDefaultValue = false)]
        public string Salt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TypedDomainData {\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("  VerifyingContract: ").Append(VerifyingContract).Append("\n");
            sb.Append("  Salt: ").Append(Salt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TypedDomainData);
        }

        /// <summary>
        /// Returns true if TypedDomainData instances are equal
        /// </summary>
        /// <param name="input">Instance of TypedDomainData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TypedDomainData input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.ChainId == input.ChainId ||
                    this.ChainId.Equals(input.ChainId)
                ) &&
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) &&
                (
                    this._Version == input._Version ||
                    (this._Version != null &&
                    this._Version.Equals(input._Version))
                ) &&
                (
                    this.VerifyingContract == input.VerifyingContract ||
                    (this.VerifyingContract != null &&
                    this.VerifyingContract.Equals(input.VerifyingContract))
                ) &&
                (
                    this.Salt == input.Salt ||
                    (this.Salt != null &&
                    this.Salt.Equals(input.Salt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ChainId.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this._Version != null)
                {
                    hashCode = (hashCode * 59) + this._Version.GetHashCode();
                }
                if (this.VerifyingContract != null)
                {
                    hashCode = (hashCode * 59) + this.VerifyingContract.GetHashCode();
                }
                if (this.Salt != null)
                {
                    hashCode = (hashCode * 59) + this.Salt.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
