/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Openfort.OpenfortSDK.Model
{
    /// <summary>
    /// UserOperationV6
    /// </summary>
    [DataContract(Name = "UserOperationV6")]
    public partial class UserOperationV6 : IEquatable<UserOperationV6>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserOperationV6" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserOperationV6() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserOperationV6" /> class.
        /// </summary>
        /// <param name="callData">The data to pass to the &#x60;sender&#x60; during the main execution call. (required).</param>
        /// <param name="callGasLimit">The amount of gas to allocate the main execution call (required).</param>
        /// <param name="initCode">Account init code. Only for new accounts..</param>
        /// <param name="maxFeePerGas">Maximum fee per gas. (required).</param>
        /// <param name="maxPriorityFeePerGas">Maximum priority fee per gas. (required).</param>
        /// <param name="nonce">Anti-replay parameter. (required).</param>
        /// <param name="paymasterAndData">Paymaster address with calldata..</param>
        /// <param name="preVerificationGas">Extra gas to pay the bundler. (required).</param>
        /// <param name="sender">The account making the operation. (required).</param>
        /// <param name="signature">Data passed into the account to verify authorization. (required).</param>
        /// <param name="verificationGasLimit">The amount of gas to allocate for the verification step. (required).</param>
        public UserOperationV6(string callData = default(string), string callGasLimit = default(string), string initCode = default(string), string maxFeePerGas = default(string), string maxPriorityFeePerGas = default(string), string nonce = default(string), string paymasterAndData = default(string), string preVerificationGas = default(string), string sender = default(string), string signature = default(string), string verificationGasLimit = default(string))
        {
            // to ensure "callData" is required (not null)
            if (callData == null)
            {
                throw new ArgumentNullException("callData is a required property for UserOperationV6 and cannot be null");
            }
            this.CallData = callData;
            // to ensure "callGasLimit" is required (not null)
            if (callGasLimit == null)
            {
                throw new ArgumentNullException("callGasLimit is a required property for UserOperationV6 and cannot be null");
            }
            this.CallGasLimit = callGasLimit;
            // to ensure "maxFeePerGas" is required (not null)
            if (maxFeePerGas == null)
            {
                throw new ArgumentNullException("maxFeePerGas is a required property for UserOperationV6 and cannot be null");
            }
            this.MaxFeePerGas = maxFeePerGas;
            // to ensure "maxPriorityFeePerGas" is required (not null)
            if (maxPriorityFeePerGas == null)
            {
                throw new ArgumentNullException("maxPriorityFeePerGas is a required property for UserOperationV6 and cannot be null");
            }
            this.MaxPriorityFeePerGas = maxPriorityFeePerGas;
            // to ensure "nonce" is required (not null)
            if (nonce == null)
            {
                throw new ArgumentNullException("nonce is a required property for UserOperationV6 and cannot be null");
            }
            this.Nonce = nonce;
            // to ensure "preVerificationGas" is required (not null)
            if (preVerificationGas == null)
            {
                throw new ArgumentNullException("preVerificationGas is a required property for UserOperationV6 and cannot be null");
            }
            this.PreVerificationGas = preVerificationGas;
            // to ensure "sender" is required (not null)
            if (sender == null)
            {
                throw new ArgumentNullException("sender is a required property for UserOperationV6 and cannot be null");
            }
            this.Sender = sender;
            // to ensure "signature" is required (not null)
            if (signature == null)
            {
                throw new ArgumentNullException("signature is a required property for UserOperationV6 and cannot be null");
            }
            this.Signature = signature;
            // to ensure "verificationGasLimit" is required (not null)
            if (verificationGasLimit == null)
            {
                throw new ArgumentNullException("verificationGasLimit is a required property for UserOperationV6 and cannot be null");
            }
            this.VerificationGasLimit = verificationGasLimit;
            this.InitCode = initCode;
            this.PaymasterAndData = paymasterAndData;
        }

        /// <summary>
        /// The data to pass to the &#x60;sender&#x60; during the main execution call.
        /// </summary>
        /// <value>The data to pass to the &#x60;sender&#x60; during the main execution call.</value>
        [DataMember(Name = "callData", IsRequired = true, EmitDefaultValue = true)]
        public string CallData { get; set; }

        /// <summary>
        /// The amount of gas to allocate the main execution call
        /// </summary>
        /// <value>The amount of gas to allocate the main execution call</value>
        [DataMember(Name = "callGasLimit", IsRequired = true, EmitDefaultValue = true)]
        public string CallGasLimit { get; set; }

        /// <summary>
        /// Account init code. Only for new accounts.
        /// </summary>
        /// <value>Account init code. Only for new accounts.</value>
        [DataMember(Name = "initCode", EmitDefaultValue = false)]
        public string InitCode { get; set; }

        /// <summary>
        /// Maximum fee per gas.
        /// </summary>
        /// <value>Maximum fee per gas.</value>
        [DataMember(Name = "maxFeePerGas", IsRequired = true, EmitDefaultValue = true)]
        public string MaxFeePerGas { get; set; }

        /// <summary>
        /// Maximum priority fee per gas.
        /// </summary>
        /// <value>Maximum priority fee per gas.</value>
        [DataMember(Name = "maxPriorityFeePerGas", IsRequired = true, EmitDefaultValue = true)]
        public string MaxPriorityFeePerGas { get; set; }

        /// <summary>
        /// Anti-replay parameter.
        /// </summary>
        /// <value>Anti-replay parameter.</value>
        [DataMember(Name = "nonce", IsRequired = true, EmitDefaultValue = true)]
        public string Nonce { get; set; }

        /// <summary>
        /// Paymaster address with calldata.
        /// </summary>
        /// <value>Paymaster address with calldata.</value>
        [DataMember(Name = "paymasterAndData", EmitDefaultValue = false)]
        public string PaymasterAndData { get; set; }

        /// <summary>
        /// Extra gas to pay the bundler.
        /// </summary>
        /// <value>Extra gas to pay the bundler.</value>
        [DataMember(Name = "preVerificationGas", IsRequired = true, EmitDefaultValue = true)]
        public string PreVerificationGas { get; set; }

        /// <summary>
        /// The account making the operation.
        /// </summary>
        /// <value>The account making the operation.</value>
        [DataMember(Name = "sender", IsRequired = true, EmitDefaultValue = true)]
        public string Sender { get; set; }

        /// <summary>
        /// Data passed into the account to verify authorization.
        /// </summary>
        /// <value>Data passed into the account to verify authorization.</value>
        [DataMember(Name = "signature", IsRequired = true, EmitDefaultValue = true)]
        public string Signature { get; set; }

        /// <summary>
        /// The amount of gas to allocate for the verification step.
        /// </summary>
        /// <value>The amount of gas to allocate for the verification step.</value>
        [DataMember(Name = "verificationGasLimit", IsRequired = true, EmitDefaultValue = true)]
        public string VerificationGasLimit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserOperationV6 {\n");
            sb.Append("  CallData: ").Append(CallData).Append("\n");
            sb.Append("  CallGasLimit: ").Append(CallGasLimit).Append("\n");
            sb.Append("  InitCode: ").Append(InitCode).Append("\n");
            sb.Append("  MaxFeePerGas: ").Append(MaxFeePerGas).Append("\n");
            sb.Append("  MaxPriorityFeePerGas: ").Append(MaxPriorityFeePerGas).Append("\n");
            sb.Append("  Nonce: ").Append(Nonce).Append("\n");
            sb.Append("  PaymasterAndData: ").Append(PaymasterAndData).Append("\n");
            sb.Append("  PreVerificationGas: ").Append(PreVerificationGas).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  VerificationGasLimit: ").Append(VerificationGasLimit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserOperationV6);
        }

        /// <summary>
        /// Returns true if UserOperationV6 instances are equal
        /// </summary>
        /// <param name="input">Instance of UserOperationV6 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserOperationV6 input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.CallData == input.CallData ||
                    (this.CallData != null &&
                    this.CallData.Equals(input.CallData))
                ) &&
                (
                    this.CallGasLimit == input.CallGasLimit ||
                    (this.CallGasLimit != null &&
                    this.CallGasLimit.Equals(input.CallGasLimit))
                ) &&
                (
                    this.InitCode == input.InitCode ||
                    (this.InitCode != null &&
                    this.InitCode.Equals(input.InitCode))
                ) &&
                (
                    this.MaxFeePerGas == input.MaxFeePerGas ||
                    (this.MaxFeePerGas != null &&
                    this.MaxFeePerGas.Equals(input.MaxFeePerGas))
                ) &&
                (
                    this.MaxPriorityFeePerGas == input.MaxPriorityFeePerGas ||
                    (this.MaxPriorityFeePerGas != null &&
                    this.MaxPriorityFeePerGas.Equals(input.MaxPriorityFeePerGas))
                ) &&
                (
                    this.Nonce == input.Nonce ||
                    (this.Nonce != null &&
                    this.Nonce.Equals(input.Nonce))
                ) &&
                (
                    this.PaymasterAndData == input.PaymasterAndData ||
                    (this.PaymasterAndData != null &&
                    this.PaymasterAndData.Equals(input.PaymasterAndData))
                ) &&
                (
                    this.PreVerificationGas == input.PreVerificationGas ||
                    (this.PreVerificationGas != null &&
                    this.PreVerificationGas.Equals(input.PreVerificationGas))
                ) &&
                (
                    this.Sender == input.Sender ||
                    (this.Sender != null &&
                    this.Sender.Equals(input.Sender))
                ) &&
                (
                    this.Signature == input.Signature ||
                    (this.Signature != null &&
                    this.Signature.Equals(input.Signature))
                ) &&
                (
                    this.VerificationGasLimit == input.VerificationGasLimit ||
                    (this.VerificationGasLimit != null &&
                    this.VerificationGasLimit.Equals(input.VerificationGasLimit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CallData != null)
                {
                    hashCode = (hashCode * 59) + this.CallData.GetHashCode();
                }
                if (this.CallGasLimit != null)
                {
                    hashCode = (hashCode * 59) + this.CallGasLimit.GetHashCode();
                }
                if (this.InitCode != null)
                {
                    hashCode = (hashCode * 59) + this.InitCode.GetHashCode();
                }
                if (this.MaxFeePerGas != null)
                {
                    hashCode = (hashCode * 59) + this.MaxFeePerGas.GetHashCode();
                }
                if (this.MaxPriorityFeePerGas != null)
                {
                    hashCode = (hashCode * 59) + this.MaxPriorityFeePerGas.GetHashCode();
                }
                if (this.Nonce != null)
                {
                    hashCode = (hashCode * 59) + this.Nonce.GetHashCode();
                }
                if (this.PaymasterAndData != null)
                {
                    hashCode = (hashCode * 59) + this.PaymasterAndData.GetHashCode();
                }
                if (this.PreVerificationGas != null)
                {
                    hashCode = (hashCode * 59) + this.PreVerificationGas.GetHashCode();
                }
                if (this.Sender != null)
                {
                    hashCode = (hashCode * 59) + this.Sender.GetHashCode();
                }
                if (this.Signature != null)
                {
                    hashCode = (hashCode * 59) + this.Signature.GetHashCode();
                }
                if (this.VerificationGasLimit != null)
                {
                    hashCode = (hashCode * 59) + this.VerificationGasLimit.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
